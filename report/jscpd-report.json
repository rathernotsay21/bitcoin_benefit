{
  "statistics": {
    "detectionDate": "2025-08-25T13:58:49.570Z",
    "formats": {
      "typescript": {
        "sources": {
          "src/app/api/mempool/address/[address]/txs/route.ts": {
            "lines": 169,
            "tokens": 1108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/mempool/tx/[txid]/route.ts": {
            "lines": 323,
            "tokens": 2716,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/mempool/network/status/route.ts": {
            "lines": 518,
            "tokens": 4199,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 78,
            "duplicatedTokens": 808,
            "percentage": 15.06,
            "percentageTokens": 19.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/mempool/fees/recommended/route.ts": {
            "lines": 433,
            "tokens": 3329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/performance/performanceValidation.test.ts": {
            "lines": 569,
            "tokens": 4700,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/performance/concurrentProcessing.performance.test.ts": {
            "lines": 390,
            "tokens": 3228,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 216,
            "percentage": 8.72,
            "percentageTokens": 6.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/timestamps/verify/route.ts": {
            "lines": 204,
            "tokens": 1373,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/timestamps/status/route.ts": {
            "lines": 167,
            "tokens": 1085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/timestamps/create/route.ts": {
            "lines": 146,
            "tokens": 929,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/mempool/network/route.ts": {
            "lines": 119,
            "tokens": 867,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 99,
            "percentage": 10.92,
            "percentageTokens": 11.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/validation.test.ts": {
            "lines": 317,
            "tokens": 2834,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/price-fetcher.test.ts": {
            "lines": 450,
            "tokens": 3779,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 96,
            "duplicatedTokens": 740,
            "percentage": 21.33,
            "percentageTokens": 19.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/mempool-api.test.ts": {
            "lines": 476,
            "tokens": 3851,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 72,
            "duplicatedTokens": 482,
            "percentage": 15.13,
            "percentageTokens": 12.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/mempool-api.integration.test.ts": {
            "lines": 219,
            "tokens": 2090,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/error-handler.test.ts": {
            "lines": 508,
            "tokens": 4156,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/api-integration.test.ts": {
            "lines": 546,
            "tokens": 4237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/annotateTransactions.test.ts": {
            "lines": 584,
            "tokens": 4985,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 164,
            "duplicatedTokens": 1164,
            "percentage": 28.08,
            "percentageTokens": 23.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/__tests__/custom-vesting.test.ts": {
            "lines": 146,
            "tokens": 1708,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 264,
            "percentage": 9.59,
            "percentageTokens": 15.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/__tests__/VestingScheduleCalculator.test.ts": {
            "lines": 133,
            "tokens": 1341,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 106,
            "percentage": 7.52,
            "percentageTokens": 7.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/__tests__/TaxImplicationCalculator.test.ts": {
            "lines": 142,
            "tokens": 1266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/__tests__/BitcoinGrowthProjector.test.ts": {
            "lines": 124,
            "tokens": 1259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/index.ts": {
            "lines": 8,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/educational/educationalContent.ts": {
            "lines": 272,
            "tokens": 1309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/health/route.ts": {
            "lines": 190,
            "tokens": 1778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/coingecko/route.ts": {
            "lines": 157,
            "tokens": 1326,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 99,
            "percentage": 8.28,
            "percentageTokens": 7.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api/bitcoin-price/route.ts": {
            "lines": 64,
            "tokens": 481,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/__tests__/onChainStore.test.ts": {
            "lines": 4,
            "tokens": 48,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/__tests__/onChainStore.integration.test.ts": {
            "lines": 680,
            "tokens": 5696,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 180,
            "duplicatedTokens": 1300,
            "percentage": 26.47,
            "percentageTokens": 22.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/__tests__/historicalCalculatorStore.test.ts": {
            "lines": 377,
            "tokens": 3372,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 23,
            "duplicatedTokens": 306,
            "percentage": 6.1,
            "percentageTokens": 9.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/__tests__/historicalCalculatorStore.integration.test.ts": {
            "lines": 286,
            "tokens": 2551,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 45,
            "duplicatedTokens": 528,
            "percentage": 15.73,
            "percentageTokens": 20.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/validation/secureInputValidator.ts": {
            "lines": 457,
            "tokens": 1471,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/validation/schemas.ts": {
            "lines": 516,
            "tokens": 4675,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 57,
            "duplicatedTokens": 646,
            "percentage": 11.05,
            "percentageTokens": 13.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/utils/store-sync.ts": {
            "lines": 132,
            "tokens": 851,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/utils/logger.ts": {
            "lines": 180,
            "tokens": 1502,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/utils/debounce.ts": {
            "lines": 188,
            "tokens": 1454,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/utils/chart-data.ts": {
            "lines": 235,
            "tokens": 2014,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/transactionService.ts": {
            "lines": 380,
            "tokens": 3128,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 52,
            "duplicatedTokens": 382,
            "percentage": 13.68,
            "percentageTokens": 12.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/timestampService.ts": {
            "lines": 368,
            "tokens": 3013,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 54,
            "duplicatedTokens": 428,
            "percentage": 14.67,
            "percentageTokens": 14.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/secureFileHandler.ts": {
            "lines": 439,
            "tokens": 3414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 87,
            "percentage": 1.82,
            "percentageTokens": 2.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/privacyManager.ts": {
            "lines": 432,
            "tokens": 2832,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/networkService.ts": {
            "lines": 196,
            "tokens": 1737,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 306,
            "percentage": 17.35,
            "percentageTokens": 17.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/enhancedRateLimiter.ts": {
            "lines": 562,
            "tokens": 4682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/services/addressService.ts": {
            "lines": 480,
            "tokens": 3858,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 66,
            "duplicatedTokens": 493,
            "percentage": 13.75,
            "percentageTokens": 12.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/seo/structured-data.ts": {
            "lines": 80,
            "tokens": 464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/secureCacheManager.ts": {
            "lines": 171,
            "tokens": 1309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/requestSizeLimiter.ts": {
            "lines": 185,
            "tokens": 1270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/requestQueueManager.ts": {
            "lines": 340,
            "tokens": 2836,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 158,
            "percentage": 4.12,
            "percentageTokens": 5.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/rateLimiter.ts": {
            "lines": 371,
            "tokens": 3194,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/inputSanitizer.ts": {
            "lines": 425,
            "tokens": 2949,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/enhancedCacheManager.ts": {
            "lines": 392,
            "tokens": 3097,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 168,
            "percentage": 5.1,
            "percentageTokens": 5.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/circuitBreaker.ts": {
            "lines": 437,
            "tokens": 3401,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/apiMonitoring.ts": {
            "lines": 335,
            "tokens": 2883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/apiMiddleware.ts": {
            "lines": 609,
            "tokens": 5507,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/security/apiKeyManager.ts": {
            "lines": 490,
            "tokens": 4123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance/performance-monitor.ts": {
            "lines": 302,
            "tokens": 2590,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 242,
            "percentage": 7.95,
            "percentageTokens": 9.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance/object-pool.ts": {
            "lines": 140,
            "tokens": 909,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance/css-optimizer.ts": {
            "lines": 153,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/validation.ts": {
            "lines": 198,
            "tokens": 1284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/price-fetcher.ts": {
            "lines": 477,
            "tokens": 4222,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 200,
            "percentage": 5.87,
            "percentageTokens": 4.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/mempool-api.ts": {
            "lines": 471,
            "tokens": 3159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/error-handler.ts": {
            "lines": 469,
            "tokens": 3041,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/concurrentProcessing.ts": {
            "lines": 590,
            "tokens": 4332,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/annotateTransactionsOptimized.ts": {
            "lines": 662,
            "tokens": 4786,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 99,
            "duplicatedTokens": 719,
            "percentage": 14.95,
            "percentageTokens": 15.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/annotateTransactions.ts": {
            "lines": 343,
            "tokens": 2740,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 99,
            "duplicatedTokens": 719,
            "percentage": 28.86,
            "percentageTokens": 26.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/index.ts": {
            "lines": 11,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/examples.ts": {
            "lines": 171,
            "tokens": 1336,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 106,
            "percentage": 5.85,
            "percentageTokens": 7.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/VestingScheduleCalculator.ts": {
            "lines": 220,
            "tokens": 1804,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/TaxImplicationCalculator.ts": {
            "lines": 196,
            "tokens": 1624,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/RiskAnalysisEngine.ts": {
            "lines": 293,
            "tokens": 2386,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/EmployeeRetentionModeler.ts": {
            "lines": 225,
            "tokens": 1749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/calculators/BitcoinGrowthProjector.ts": {
            "lines": 140,
            "tokens": 1114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/api/cache-wrapper.ts": {
            "lines": 207,
            "tokens": 1574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/secure-fetch-wrapper.test.ts": {
            "lines": 382,
            "tokens": 3292,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/historical-vesting-schemes.test.ts": {
            "lines": 62,
            "tokens": 678,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/historical-integration.test.ts": {
            "lines": 205,
            "tokens": 1864,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 265,
            "percentage": 17.56,
            "percentageTokens": 14.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/historical-calculations.test.ts": {
            "lines": 519,
            "tokens": 4266,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 140,
            "duplicatedTokens": 817,
            "percentage": 26.97,
            "percentageTokens": 19.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/historical-bitcoin-api.test.ts": {
            "lines": 329,
            "tokens": 3054,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/cost-basis-calculator.test.ts": {
            "lines": 536,
            "tokens": 3612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/bitcoin-precision.test.ts": {
            "lines": 166,
            "tokens": 1615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/index.ts": {
            "lines": 23,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/types.ts": {
            "lines": 19,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/index.ts": {
            "lines": 26,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/index.ts": {
            "lines": 16,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/workers/vesting-calculator.worker.ts": {
            "lines": 156,
            "tokens": 1064,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/vesting.ts": {
            "lines": 134,
            "tokens": 858,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/performance-optimized.ts": {
            "lines": 178,
            "tokens": 1792,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/on-chain.ts": {
            "lines": 75,
            "tokens": 465,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/index.ts": {
            "lines": 479,
            "tokens": 2009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/global.d.ts": {
            "lines": 55,
            "tokens": 351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/components.ts": {
            "lines": 444,
            "tokens": 3296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/bitcoin-tools.ts": {
            "lines": 944,
            "tokens": 8455,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/api.ts": {
            "lines": 423,
            "tokens": 3898,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 53,
            "duplicatedTokens": 758,
            "percentage": 12.53,
            "percentageTokens": 19.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/selectors.ts": {
            "lines": 163,
            "tokens": 1426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/onChainStore.ts": {
            "lines": 563,
            "tokens": 4389,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 214,
            "percentage": 4.97,
            "percentageTokens": 4.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/historicalCalculatorStore.ts": {
            "lines": 365,
            "tokens": 2694,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 104,
            "percentage": 4.38,
            "percentageTokens": 3.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/calculatorStore.ts": {
            "lines": 440,
            "tokens": 3764,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 64,
            "duplicatedTokens": 544,
            "percentage": 14.55,
            "percentageTokens": 14.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/stores/bitcoinToolsStore.ts": {
            "lines": 495,
            "tokens": 3673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/vesting-schemes.ts": {
            "lines": 99,
            "tokens": 606,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 125,
            "duplicatedTokens": 711,
            "percentage": 126.26,
            "percentageTokens": 117.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/vesting-calculations.ts": {
            "lines": 207,
            "tokens": 1634,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/utils.ts": {
            "lines": 160,
            "tokens": 1332,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/type-safe-error-handler.ts": {
            "lines": 265,
            "tokens": 2225,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/secure-fetch-wrapper.ts": {
            "lines": 334,
            "tokens": 2620,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance-monitor.ts": {
            "lines": 214,
            "tokens": 1639,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/historical-vesting-schemes.ts": {
            "lines": 102,
            "tokens": 631,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 81,
            "duplicatedTokens": 469,
            "percentage": 79.41,
            "percentageTokens": 74.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/historical-calculations.ts": {
            "lines": 298,
            "tokens": 2097,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/historical-bitcoin-api.ts": {
            "lines": 225,
            "tokens": 2173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/help-content.ts": {
            "lines": 68,
            "tokens": 299,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/ensure-styles.ts": {
            "lines": 18,
            "tokens": 152,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/critical-css.ts": {
            "lines": 286,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/cost-basis-calculator.ts": {
            "lines": 250,
            "tokens": 2130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/chart-loader.ts": {
            "lines": 228,
            "tokens": 1560,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/bitcoin-precision.ts": {
            "lines": 152,
            "tokens": 846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/bitcoin-api.ts": {
            "lines": 70,
            "tokens": 632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/bitcoin-api-optimized.ts": {
            "lines": 249,
            "tokens": 1930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/api-client.ts": {
            "lines": 389,
            "tokens": 2493,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 164,
            "percentage": 4.11,
            "percentageTokens": 6.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useVestingWorker.ts": {
            "lines": 221,
            "tokens": 1797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useStoreSync.ts": {
            "lines": 58,
            "tokens": 320,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/usePrivacyProtection.ts": {
            "lines": 311,
            "tokens": 2419,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useParallelDataLoader.ts": {
            "lines": 114,
            "tokens": 905,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useOptimizedStores.ts": {
            "lines": 108,
            "tokens": 744,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useMagneticHover.ts": {
            "lines": 71,
            "tokens": 629,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useIdleAnimationPause.ts": {
            "lines": 110,
            "tokens": 888,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useDebounce.ts": {
            "lines": 185,
            "tokens": 1263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useConditionalPreload.ts": {
            "lines": 52,
            "tokens": 361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useChartData.ts": {
            "lines": 166,
            "tokens": 1208,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useCalculatorOptimized.ts": {
            "lines": 171,
            "tokens": 1431,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useCalculation.ts": {
            "lines": 80,
            "tokens": 424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useBitcoinPriceSync.ts": {
            "lines": 170,
            "tokens": 1245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useBitcoinPrice.ts": {
            "lines": 53,
            "tokens": 455,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/index.ts": {
            "lines": 45,
            "tokens": 186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/sitemap.ts": {
            "lines": 45,
            "tokens": 345,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/seo-config.ts": {
            "lines": 186,
            "tokens": 1276,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test-setup.ts": {
            "lines": 311,
            "tokens": 2778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 35657,
          "tokens": 277447,
          "sources": 133,
          "clones": 63,
          "duplicatedLines": 933,
          "duplicatedTokens": 7406,
          "percentage": 2.62,
          "percentageTokens": 2.67,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "src/components/on-chain/__tests__/performance/componentPerformance.test.tsx": {
            "lines": 397,
            "tokens": 3092,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 360,
            "duplicatedTokens": 2796,
            "percentage": 90.68,
            "percentageTokens": 90.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/error-handling-integration.test.tsx": {
            "lines": 146,
            "tokens": 1480,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 146,
            "duplicatedTokens": 1802,
            "percentage": 100,
            "percentageTokens": 121.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerResults.test.tsx": {
            "lines": 364,
            "tokens": 3063,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/OnChainTimelineVisualizer.test.tsx": {
            "lines": 148,
            "tokens": 1240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx": {
            "lines": 369,
            "tokens": 2638,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 444,
            "duplicatedTokens": 3242,
            "percentage": 120.33,
            "percentageTokens": 122.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartLegend.tsx": {
            "lines": 10,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartCore.tsx": {
            "lines": 139,
            "tokens": 999,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartContainer.tsx": {
            "lines": 8,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/educational/EducationalSidebar.tsx": {
            "lines": 42,
            "tokens": 389,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/__tests__/page.test.tsx": {
            "lines": 50,
            "tokens": 539,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 31,
            "duplicatedTokens": 373,
            "percentage": 62,
            "percentageTokens": 69.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/__tests__/integration.test.tsx": {
            "lines": 36,
            "tokens": 490,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 31,
            "duplicatedTokens": 373,
            "percentage": 86.11,
            "percentageTokens": 76.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/page.tsx": {
            "lines": 4,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/loading.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/error.tsx": {
            "lines": 21,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/CalculatorPlanClient.tsx": {
            "lines": 344,
            "tokens": 3435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance/monitor.tsx": {
            "lines": 110,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/tooltip.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/tabs.tsx": {
            "lines": 34,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/table.tsx": {
            "lines": 94,
            "tokens": 611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/skeleton.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/sheet.tsx": {
            "lines": 100,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/separator.tsx": {
            "lines": 7,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/select.tsx": {
            "lines": 122,
            "tokens": 815,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/progress.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/particles.tsx": {
            "lines": 2,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/noise.tsx": {
            "lines": 5,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/navigation-menu.tsx": {
            "lines": 131,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/input.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/dialog.tsx": {
            "lines": 85,
            "tokens": 524,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/command.tsx": {
            "lines": 120,
            "tokens": 787,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/carousel.tsx": {
            "lines": 115,
            "tokens": 697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/card.tsx": {
            "lines": 60,
            "tokens": 435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/button.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/badge.tsx": {
            "lines": 0,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/alert.tsx": {
            "lines": 26,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/CollapsibleBoxDemo.tsx": {
            "lines": 31,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/CollapsibleBox.tsx": {
            "lines": 254,
            "tokens": 1637,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/seo/StructuredData.tsx": {
            "lines": 0,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/performance/PerformanceMonitor.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/optimized/MemoizedMetricCards.tsx": {
            "lines": 116,
            "tokens": 1111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/optimized/MemoizedChart.tsx": {
            "lines": 10,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerResultsOptimized.tsx": {
            "lines": 471,
            "tokens": 3884,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 644,
            "percentage": 20.81,
            "percentageTokens": 16.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerResults.tsx": {
            "lines": 483,
            "tokens": 3631,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerFormOptimized.tsx": {
            "lines": 221,
            "tokens": 1513,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerForm.tsx": {
            "lines": 438,
            "tokens": 3883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/PerformanceMonitoringDashboard.tsx": {
            "lines": 323,
            "tokens": 2927,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/OnChainTimelineVisualizer.tsx": {
            "lines": 233,
            "tokens": 1964,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/OnChainErrorBoundaries.tsx": {
            "lines": 323,
            "tokens": 2073,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/ManualAnnotationOverride.tsx": {
            "lines": 166,
            "tokens": 1110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/navigation/ToolsDropdown.tsx": {
            "lines": 3,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/Skeletons.tsx": {
            "lines": 206,
            "tokens": 1901,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/PageSkeletons.tsx": {
            "lines": 94,
            "tokens": 855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/OptimizedChartLoader.tsx": {
            "lines": 53,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/EnhancedSkeletons.tsx": {
            "lines": 164,
            "tokens": 1461,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/ChartSuspense.tsx": {
            "lines": 145,
            "tokens": 1072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/ChartSkeleton.tsx": {
            "lines": 179,
            "tokens": 1909,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/CalculatorSkeleton.tsx": {
            "lines": 35,
            "tokens": 350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiOutlineIcon.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiManIcon.tsx": {
            "lines": 4,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiIcon.tsx": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MiningOutlineIcon.tsx": {
            "lines": 45,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MiningIcon.tsx": {
            "lines": 9,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MinerOutlineIcon.tsx": {
            "lines": 23,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/IconSprite.tsx": {
            "lines": 47,
            "tokens": 525,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/IconShowcase.tsx": {
            "lines": 38,
            "tokens": 423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinStyledIcon.tsx": {
            "lines": 4,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinPresentationIcon.tsx": {
            "lines": 36,
            "tokens": 189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinOutlineIcon.tsx": {
            "lines": 17,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinIcon.tsx": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinCircleOutlineIcon.tsx": {
            "lines": 49,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinCircleIcon.tsx": {
            "lines": 19,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BTCIcon.tsx": {
            "lines": 5,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/examples/OptimizedInputs.tsx": {
            "lines": 82,
            "tokens": 747,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/dev/APITester.tsx": {
            "lines": 11,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/OptimizedChartLoader.tsx": {
            "lines": 0,
            "tokens": 6,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/LazyVestingChart.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/LazyCharts.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/ChartProgressiveLoader.tsx": {
            "lines": 12,
            "tokens": 110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/TransactionLookupTool.tsx": {
            "lines": 321,
            "tokens": 2855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/Tooltip.tsx": {
            "lines": 157,
            "tokens": 1085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolTabsNavigation.tsx": {
            "lines": 84,
            "tokens": 705,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolSkeleton.tsx": {
            "lines": 167,
            "tokens": 1385,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolErrorBoundary.tsx": {
            "lines": 161,
            "tokens": 1148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolCommandPalette.tsx": {
            "lines": 39,
            "tokens": 371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/PrivacyWarning.tsx": {
            "lines": 197,
            "tokens": 1655,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/NetworkStatus.tsx": {
            "lines": 296,
            "tokens": 3088,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/FeeCalculatorTool.tsx": {
            "lines": 272,
            "tokens": 2271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/DocumentTimestampingTool.tsx": {
            "lines": 364,
            "tokens": 3137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/BitcoinTooltips.tsx": {
            "lines": 85,
            "tokens": 653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/AddressExplorerTool.tsx": {
            "lines": 289,
            "tokens": 2841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/useCallback.test.tsx": {
            "lines": 211,
            "tokens": 1701,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.test.tsx": {
            "lines": 295,
            "tokens": 2122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.styling.test.tsx": {
            "lines": 58,
            "tokens": 383,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.integration.test.tsx": {
            "lines": 72,
            "tokens": 460,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/VirtualizedAnnualBreakdown.test.tsx": {
            "lines": 28,
            "tokens": 321,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/VirtualizedAnnualBreakdown.performance.test.tsx": {
            "lines": 146,
            "tokens": 1059,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/ProgressiveDisclosure.test.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/HistoricalTimelineChart.test.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/page.tsx": {
            "lines": 691,
            "tokens": 5625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/learn/page.tsx": {
            "lines": 358,
            "tokens": 3318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/historical/page.tsx": {
            "lines": 294,
            "tokens": 2407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/bitcoin-tools/page.tsx": {
            "lines": 61,
            "tokens": 692,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/bitcoin-tools/enhanced-page.tsx": {
            "lines": 12,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api-test/page.tsx": {
            "lines": 26,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/YearSelector.tsx": {
            "lines": 32,
            "tokens": 241,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VirtualizedAnnualBreakdownOptimized.tsx": {
            "lines": 159,
            "tokens": 1442,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VirtualizedAnnualBreakdown.tsx": {
            "lines": 163,
            "tokens": 1339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingTimelineChartRecharts.tsx": {
            "lines": 678,
            "tokens": 6580,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingProgress.tsx": {
            "lines": 111,
            "tokens": 935,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingPresets.tsx": {
            "lines": 34,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ThemeProvider.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/TaxImplicationsCard.tsx": {
            "lines": 0,
            "tokens": 12,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/SchemeTabSelector.tsx": {
            "lines": 30,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/RiskAnalysisCard.tsx": {
            "lines": 61,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/RetentionAnalysisCard.tsx": {
            "lines": 61,
            "tokens": 558,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ProgressiveDisclosure.tsx": {
            "lines": 78,
            "tokens": 570,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/OptimizedImage.tsx": {
            "lines": 27,
            "tokens": 143,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/Navigation.tsx": {
            "lines": 102,
            "tokens": 725,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/MobileNavSheet.tsx": {
            "lines": 126,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/MetricCards.tsx": {
            "lines": 380,
            "tokens": 3624,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 183,
            "duplicatedTokens": 1497,
            "percentage": 48.16,
            "percentageTokens": 41.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalTimelineVisualizationOptimized.tsx": {
            "lines": 377,
            "tokens": 3379,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalMetricCards.tsx": {
            "lines": 192,
            "tokens": 1586,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 183,
            "duplicatedTokens": 1497,
            "percentage": 95.31,
            "percentageTokens": 94.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalDataTable.tsx": {
            "lines": 302,
            "tokens": 2740,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 222,
            "duplicatedTokens": 1970,
            "percentage": 73.51,
            "percentageTokens": 71.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HelpTooltip.tsx": {
            "lines": 12,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/FinancialDisclaimer.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ErrorBoundary.tsx": {
            "lines": 159,
            "tokens": 952,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ErrorAlert.tsx": {
            "lines": 50,
            "tokens": 472,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/CustomVestingSchedule.tsx": {
            "lines": 291,
            "tokens": 2238,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/CSSLoadingGuard.tsx": {
            "lines": 24,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/AdvancedAnalyticsDashboard.tsx": {
            "lines": 38,
            "tokens": 267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/page.tsx": {
            "lines": 331,
            "tokens": 3410,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/layout.tsx": {
            "lines": 40,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/__tests__/performance-optimizations.test.tsx": {
            "lines": 89,
            "tokens": 585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/__mocks__/recharts.tsx": {
            "lines": 219,
            "tokens": 1660,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test-utils.tsx": {
            "lines": 8,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 16335,
          "tokens": 135491,
          "sources": 137,
          "clones": 8,
          "duplicatedLines": 849,
          "duplicatedTokens": 7097,
          "percentage": 5.2,
          "percentageTokens": 5.24,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "tsx": {
        "sources": {
          "src/components/on-chain/__tests__/performance/componentPerformance.test.tsx": {
            "lines": 494,
            "tokens": 4107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/on-chain/__tests__/error-handling-integration.test.tsx": {
            "lines": 710,
            "tokens": 6002,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 60,
            "duplicatedTokens": 415,
            "percentage": 8.45,
            "percentageTokens": 6.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerResults.test.tsx": {
            "lines": 442,
            "tokens": 3618,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx": {
            "lines": 449,
            "tokens": 3956,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 139,
            "duplicatedTokens": 1272,
            "percentage": 30.96,
            "percentageTokens": 32.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx": {
            "lines": 181,
            "tokens": 1567,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 107,
            "duplicatedTokens": 952,
            "percentage": 59.12,
            "percentageTokens": 60.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/OnChainTimelineVisualizer.test.tsx": {
            "lines": 383,
            "tokens": 3138,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 180,
            "percentage": 6.27,
            "percentageTokens": 5.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/OnChainErrorBoundaries.test.tsx": {
            "lines": 34,
            "tokens": 244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx": {
            "lines": 457,
            "tokens": 3271,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 138,
            "duplicatedTokens": 1008,
            "percentage": 30.2,
            "percentageTokens": 30.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx": {
            "lines": 318,
            "tokens": 2825,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 130,
            "duplicatedTokens": 1142,
            "percentage": 40.88,
            "percentageTokens": 40.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartTooltip.tsx": {
            "lines": 90,
            "tokens": 784,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartLegend.tsx": {
            "lines": 46,
            "tokens": 417,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartData.tsx": {
            "lines": 271,
            "tokens": 2821,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 103,
            "duplicatedTokens": 1036,
            "percentage": 38.01,
            "percentageTokens": 36.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartCore.tsx": {
            "lines": 204,
            "tokens": 1495,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/vesting/VestingChartContainer.tsx": {
            "lines": 121,
            "tokens": 943,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 127,
            "percentage": 12.4,
            "percentageTokens": 13.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/educational/EducationalSidebar.tsx": {
            "lines": 126,
            "tokens": 944,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/__tests__/page.test.tsx": {
            "lines": 565,
            "tokens": 4892,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 144,
            "duplicatedTokens": 1221,
            "percentage": 25.49,
            "percentageTokens": 24.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/__tests__/integration.test.tsx": {
            "lines": 936,
            "tokens": 7889,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 77,
            "duplicatedTokens": 753,
            "percentage": 8.23,
            "percentageTokens": 9.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/__tests__/integration-simple.test.tsx": {
            "lines": 72,
            "tokens": 778,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 159,
            "percentage": 26.39,
            "percentageTokens": 20.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/historical/__tests__/page.test.tsx": {
            "lines": 137,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/page.tsx": {
            "lines": 93,
            "tokens": 771,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/not-found.tsx": {
            "lines": 40,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/loading.tsx": {
            "lines": 75,
            "tokens": 645,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/error.tsx": {
            "lines": 65,
            "tokens": 518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/[plan]/CalculatorPlanClient.tsx": {
            "lines": 548,
            "tokens": 5367,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 97,
            "duplicatedTokens": 717,
            "percentage": 17.7,
            "percentageTokens": 13.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/performance/monitor.tsx": {
            "lines": 316,
            "tokens": 2371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/tooltip.tsx": {
            "lines": 31,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/tabs.tsx": {
            "lines": 54,
            "tokens": 361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/table.tsx": {
            "lines": 119,
            "tokens": 754,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/skeleton.tsx": {
            "lines": 14,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/sheet.tsx": {
            "lines": 138,
            "tokens": 873,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/separator.tsx": {
            "lines": 30,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/select.tsx": {
            "lines": 157,
            "tokens": 1036,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/progress.tsx": {
            "lines": 27,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/particles.tsx": {
            "lines": 227,
            "tokens": 2217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/noise.tsx": {
            "lines": 130,
            "tokens": 1233,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/navigation-menu.tsx": {
            "lines": 167,
            "tokens": 837,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/input.tsx": {
            "lines": 21,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/dialog.tsx": {
            "lines": 122,
            "tokens": 747,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/command.tsx": {
            "lines": 151,
            "tokens": 993,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/carousel.tsx": {
            "lines": 234,
            "tokens": 1642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/card.tsx": {
            "lines": 75,
            "tokens": 552,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/button.tsx": {
            "lines": 56,
            "tokens": 375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/badge.tsx": {
            "lines": 35,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/alert.tsx": {
            "lines": 58,
            "tokens": 404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/CollapsibleBoxDemo.tsx": {
            "lines": 57,
            "tokens": 782,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ui/CollapsibleBox.tsx": {
            "lines": 701,
            "tokens": 4616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/seo/StructuredData.tsx": {
            "lines": 15,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/performance/WebVitalsReporter.tsx": {
            "lines": 97,
            "tokens": 762,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/performance/PerformanceOptimizer.tsx": {
            "lines": 64,
            "tokens": 474,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/performance/PerformanceMonitor.tsx": {
            "lines": 287,
            "tokens": 2668,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/optimized/MemoizedMetricCards.tsx": {
            "lines": 150,
            "tokens": 1315,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/optimized/MemoizedChart.tsx": {
            "lines": 66,
            "tokens": 449,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerResultsOptimized.tsx": {
            "lines": 537,
            "tokens": 4616,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 107,
            "duplicatedTokens": 1101,
            "percentage": 19.93,
            "percentageTokens": 23.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerResults.tsx": {
            "lines": 694,
            "tokens": 5583,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 118,
            "duplicatedTokens": 1165,
            "percentage": 17,
            "percentageTokens": 20.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerFormOptimized.tsx": {
            "lines": 490,
            "tokens": 3952,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 70,
            "duplicatedTokens": 594,
            "percentage": 14.29,
            "percentageTokens": 15.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/VestingTrackerForm.tsx": {
            "lines": 707,
            "tokens": 6197,
            "sources": 1,
            "clones": 18,
            "duplicatedLines": 189,
            "duplicatedTokens": 1883,
            "percentage": 26.73,
            "percentageTokens": 30.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/PerformanceMonitoringDashboard.tsx": {
            "lines": 427,
            "tokens": 3827,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/OnChainTimelineVisualizer.tsx": {
            "lines": 362,
            "tokens": 3086,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/OnChainErrorBoundaries.tsx": {
            "lines": 360,
            "tokens": 2295,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 286,
            "percentage": 16.11,
            "percentageTokens": 12.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/on-chain/ManualAnnotationOverride.tsx": {
            "lines": 501,
            "tokens": 3934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/navigation/ToolsDropdown.tsx": {
            "lines": 76,
            "tokens": 497,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/Skeletons.tsx": {
            "lines": 227,
            "tokens": 2097,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 78,
            "duplicatedTokens": 722,
            "percentage": 34.36,
            "percentageTokens": 34.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/PageSkeletons.tsx": {
            "lines": 125,
            "tokens": 1111,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 138,
            "percentage": 11.2,
            "percentageTokens": 12.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/OptimizedChartLoader.tsx": {
            "lines": 237,
            "tokens": 2015,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 105,
            "percentage": 5.06,
            "percentageTokens": 5.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/EnhancedSkeletons.tsx": {
            "lines": 193,
            "tokens": 1673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/ChartSuspense.tsx": {
            "lines": 194,
            "tokens": 1394,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 38,
            "duplicatedTokens": 357,
            "percentage": 19.59,
            "percentageTokens": 25.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/ChartSkeleton.tsx": {
            "lines": 213,
            "tokens": 2123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/loading/CalculatorSkeleton.tsx": {
            "lines": 55,
            "tokens": 521,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiOutlineIcon.tsx": {
            "lines": 32,
            "tokens": 205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiManIcon.tsx": {
            "lines": 50,
            "tokens": 312,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/SatoshiIcon.tsx": {
            "lines": 30,
            "tokens": 183,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 122,
            "duplicatedTokens": 825,
            "percentage": 406.67,
            "percentageTokens": 450.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MiningOutlineIcon.tsx": {
            "lines": 66,
            "tokens": 375,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 99,
            "percentage": 22.73,
            "percentageTokens": 26.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MiningIcon.tsx": {
            "lines": 28,
            "tokens": 171,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 53.57,
            "percentageTokens": 59.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/MinerOutlineIcon.tsx": {
            "lines": 44,
            "tokens": 249,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 34.09,
            "percentageTokens": 40.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/IconWrapper.tsx": {
            "lines": 28,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/IconSprite.tsx": {
            "lines": 50,
            "tokens": 555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/IconShowcase.tsx": {
            "lines": 91,
            "tokens": 907,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 218,
            "percentage": 21.98,
            "percentageTokens": 24.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinStyledIcon.tsx": {
            "lines": 49,
            "tokens": 406,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinPresentationIcon.tsx": {
            "lines": 58,
            "tokens": 327,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 25.86,
            "percentageTokens": 31.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinOutlineIcon.tsx": {
            "lines": 36,
            "tokens": 207,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 41.67,
            "percentageTokens": 49.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinIcon.tsx": {
            "lines": 30,
            "tokens": 183,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 114,
            "percentage": 56.67,
            "percentageTokens": 62.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinCircleOutlineIcon.tsx": {
            "lines": 70,
            "tokens": 381,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 21.43,
            "percentageTokens": 26.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BitcoinCircleIcon.tsx": {
            "lines": 38,
            "tokens": 219,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 102,
            "percentage": 39.47,
            "percentageTokens": 46.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/icons/BTCIcon.tsx": {
            "lines": 30,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/examples/OptimizedInputs.tsx": {
            "lines": 145,
            "tokens": 1203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/dev/APITester.tsx": {
            "lines": 115,
            "tokens": 1014,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 350,
            "percentage": 33.04,
            "percentageTokens": 34.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/OptimizedChartLoader.tsx": {
            "lines": 83,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/LazyVestingChart.tsx": {
            "lines": 24,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/LazyCharts.tsx": {
            "lines": 59,
            "tokens": 411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/charts/ChartProgressiveLoader.tsx": {
            "lines": 171,
            "tokens": 1369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/TransactionLookupTool.tsx": {
            "lines": 472,
            "tokens": 4047,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 346,
            "percentage": 12.29,
            "percentageTokens": 8.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/Tooltip.tsx": {
            "lines": 336,
            "tokens": 2738,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 85,
            "duplicatedTokens": 526,
            "percentage": 25.3,
            "percentageTokens": 19.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolTabsNavigation.tsx": {
            "lines": 323,
            "tokens": 2723,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolSkeleton.tsx": {
            "lines": 243,
            "tokens": 2006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolErrorBoundary.tsx": {
            "lines": 257,
            "tokens": 1916,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/ToolCommandPalette.tsx": {
            "lines": 202,
            "tokens": 1694,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/PrivacyWarning.tsx": {
            "lines": 312,
            "tokens": 2450,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/NetworkStatus.tsx": {
            "lines": 647,
            "tokens": 6408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/FeeCalculatorTool.tsx": {
            "lines": 653,
            "tokens": 5958,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 89,
            "percentage": 2.45,
            "percentageTokens": 1.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/DocumentTimestampingTool.tsx": {
            "lines": 580,
            "tokens": 4964,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 81,
            "percentage": 2.41,
            "percentageTokens": 1.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/BitcoinTooltips.tsx": {
            "lines": 206,
            "tokens": 1414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 85,
            "duplicatedTokens": 526,
            "percentage": 41.26,
            "percentageTokens": 37.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/bitcoin-tools/AddressExplorerTool.tsx": {
            "lines": 434,
            "tokens": 4197,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 176,
            "percentage": 6.45,
            "percentageTokens": 4.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/useCallback.test.tsx": {
            "lines": 319,
            "tokens": 2650,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.test.tsx": {
            "lines": 320,
            "tokens": 2318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.styling.test.tsx": {
            "lines": 93,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/YearSelector.integration.test.tsx": {
            "lines": 135,
            "tokens": 1000,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/VirtualizedAnnualBreakdown.test.tsx": {
            "lines": 77,
            "tokens": 830,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 114,
            "percentage": 11.69,
            "percentageTokens": 13.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/VirtualizedAnnualBreakdown.performance.test.tsx": {
            "lines": 191,
            "tokens": 1463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 114,
            "percentage": 4.71,
            "percentageTokens": 7.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/ProgressiveDisclosure.test.tsx": {
            "lines": 88,
            "tokens": 701,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 174,
            "percentage": 25,
            "percentageTokens": 24.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/__tests__/HistoricalTimelineChart.test.tsx": {
            "lines": 165,
            "tokens": 1411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/track/page.tsx": {
            "lines": 830,
            "tokens": 6644,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 185,
            "percentage": 2.17,
            "percentageTokens": 2.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/terms/page.tsx": {
            "lines": 127,
            "tokens": 1723,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 162,
            "percentage": 17.32,
            "percentageTokens": 9.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/risk-disclosure/page.tsx": {
            "lines": 186,
            "tokens": 2517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/privacy/page.tsx": {
            "lines": 156,
            "tokens": 2241,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 162,
            "percentage": 14.1,
            "percentageTokens": 7.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/learn/page.tsx": {
            "lines": 523,
            "tokens": 5254,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 99,
            "duplicatedTokens": 1027,
            "percentage": 18.93,
            "percentageTokens": 19.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/icon-preview/page.tsx": {
            "lines": 11,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/historical/page.tsx": {
            "lines": 456,
            "tokens": 3641,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 234,
            "percentage": 6.8,
            "percentageTokens": 6.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/page.tsx": {
            "lines": 25,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/calculator/layout.tsx": {
            "lines": 35,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/bitcoin-tools/page.tsx": {
            "lines": 169,
            "tokens": 1672,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 187,
            "percentage": 16.57,
            "percentageTokens": 11.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/bitcoin-tools/enhanced-page.tsx": {
            "lines": 167,
            "tokens": 1629,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 187,
            "percentage": 16.77,
            "percentageTokens": 11.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/api-test/page.tsx": {
            "lines": 132,
            "tokens": 1286,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 350,
            "percentage": 28.79,
            "percentageTokens": 27.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/__tests__/page.test.tsx": {
            "lines": 149,
            "tokens": 1176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/YearSelector.tsx": {
            "lines": 118,
            "tokens": 899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VirtualizedAnnualBreakdownOptimized.tsx": {
            "lines": 265,
            "tokens": 2372,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 275,
            "percentage": 12.83,
            "percentageTokens": 11.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VirtualizedAnnualBreakdown.tsx": {
            "lines": 259,
            "tokens": 2162,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 271,
            "percentage": 13.13,
            "percentageTokens": 12.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingTimelineChartRecharts.tsx": {
            "lines": 813,
            "tokens": 7734,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 134,
            "duplicatedTokens": 1271,
            "percentage": 16.48,
            "percentageTokens": 16.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingProgress.tsx": {
            "lines": 330,
            "tokens": 2841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/VestingPresets.tsx": {
            "lines": 125,
            "tokens": 1167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ThemeProvider.tsx": {
            "lines": 59,
            "tokens": 496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/TaxImplicationsCard.tsx": {
            "lines": 121,
            "tokens": 1050,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/StoreSyncProvider.tsx": {
            "lines": 18,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ServiceWorkerRegistration.tsx": {
            "lines": 69,
            "tokens": 578,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/SchemeTabSelector.tsx": {
            "lines": 128,
            "tokens": 1155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/RiskAnalysisCard.tsx": {
            "lines": 225,
            "tokens": 2019,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/RetentionAnalysisCard.tsx": {
            "lines": 227,
            "tokens": 2006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ProgressiveDisclosure.tsx": {
            "lines": 98,
            "tokens": 726,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/PrefetchLinks.tsx": {
            "lines": 122,
            "tokens": 1108,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 268,
            "percentage": 22.95,
            "percentageTokens": 24.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/OptimizedImage.tsx": {
            "lines": 155,
            "tokens": 991,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/Navigation.tsx": {
            "lines": 213,
            "tokens": 1448,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 117,
            "percentage": 8.92,
            "percentageTokens": 8.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/MobileNavSheet.tsx": {
            "lines": 269,
            "tokens": 1979,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 117,
            "percentage": 7.06,
            "percentageTokens": 5.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/MetricCards.tsx": {
            "lines": 433,
            "tokens": 3963,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 106,
            "duplicatedTokens": 775,
            "percentage": 24.48,
            "percentageTokens": 19.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalTimelineVisualizationOptimized.tsx": {
            "lines": 473,
            "tokens": 4209,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 173,
            "percentage": 4.65,
            "percentageTokens": 4.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalMetricCards.tsx": {
            "lines": 241,
            "tokens": 1885,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 110,
            "duplicatedTokens": 796,
            "percentage": 45.64,
            "percentageTokens": 42.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HistoricalDataTable.tsx": {
            "lines": 407,
            "tokens": 3473,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 114,
            "duplicatedTokens": 1196,
            "percentage": 28.01,
            "percentageTokens": 34.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HeroButtons.tsx": {
            "lines": 25,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/HelpTooltip.tsx": {
            "lines": 42,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/Footer.tsx": {
            "lines": 300,
            "tokens": 2089,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/FinancialDisclaimer.tsx": {
            "lines": 17,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ErrorBoundary.tsx": {
            "lines": 229,
            "tokens": 1451,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 118,
            "percentage": 10.48,
            "percentageTokens": 8.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/ErrorAlert.tsx": {
            "lines": 181,
            "tokens": 1456,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/CustomVestingSchedule.tsx": {
            "lines": 443,
            "tokens": 3867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/CSSLoadingGuard.tsx": {
            "lines": 170,
            "tokens": 1350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/components/AdvancedAnalyticsDashboard.tsx": {
            "lines": 98,
            "tokens": 861,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/page.tsx": {
            "lines": 409,
            "tokens": 3990,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 81,
            "duplicatedTokens": 786,
            "percentage": 19.8,
            "percentageTokens": 19.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app/layout.tsx": {
            "lines": 147,
            "tokens": 1099,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/__tests__/performance-optimizations.test.tsx": {
            "lines": 180,
            "tokens": 1262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/__mocks__/recharts.tsx": {
            "lines": 275,
            "tokens": 1830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test-utils.tsx": {
            "lines": 426,
            "tokens": 3203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 34310,
          "tokens": 286927,
          "sources": 159,
          "clones": 116,
          "duplicatedLines": 1688,
          "duplicatedTokens": 14177,
          "percentage": 4.92,
          "percentageTokens": 4.94,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 86302,
      "tokens": 699865,
      "sources": 429,
      "clones": 187,
      "duplicatedLines": 3470,
      "duplicatedTokens": 28680,
      "percentage": 4.02,
      "percentageTokens": 4.1,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "const fallbackMempool: MempoolInfo = mempoolData ? {\n        count: mempoolData.count || 0,\n        vsize: mempoolData.vsize || 0,\n        total_fee: toSatoshiAmount(mempoolData.total_fee || 0),\n        fee_histogram: mempoolData.fee_histogram || [],\n        timestamp: toUnixTimestamp(Math.floor(Date.now() / 1000))\n      } : networkStatusCache",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 334,
        "end": 340,
        "startLoc": {
          "line": 334,
          "column": 7,
          "position": 2470
        },
        "endLoc": {
          "line": 340,
          "column": 19,
          "position": 2568
        }
      },
      "secondFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 238,
        "end": 244,
        "startLoc": {
          "line": 238,
          "column": 5,
          "position": 1662
        },
        "endLoc": {
          "line": 244,
          "column": 2,
          "position": 1760
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "[],\n        timestamp: toUnixTimestamp(Math.floor(Date.now() / 1000))\n      } : {\n        count: 150000,\n        vsize: 50000000,\n        total_fee: toSatoshiAmount(1000000),\n        fee_histogram: [],\n        timestamp: toUnixTimestamp(Math.floor(Date.now() / 1000))\n      };\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 344,
        "end": 354,
        "startLoc": {
          "line": 344,
          "column": 2,
          "position": 2612
        },
        "endLoc": {
          "line": 354,
          "column": 6,
          "position": 2705
        }
      },
      "secondFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 242,
        "end": 252,
        "startLoc": {
          "line": 242,
          "column": 2,
          "position": 1729
        },
        "endLoc": {
          "line": 252,
          "column": 38,
          "position": 1822
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "{\n            fastestFee: toFeeRateUnsafe(feeData.fastestFee || 25),\n            halfHourFee: toFeeRateUnsafe(feeData.halfHourFee || 20),\n            hourFee: toFeeRateUnsafe(feeData.hourFee || 15),\n            economyFee: toFeeRateUnsafe(feeData.economyFee || 10),\n            minimumFee: toFeeRateUnsafe(feeData.minimumFee || 1)\n          };",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 356,
        "end": 362,
        "startLoc": {
          "line": 356,
          "column": 2,
          "position": 2734
        },
        "endLoc": {
          "line": 362,
          "column": 2,
          "position": 2817
        }
      },
      "secondFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 253,
        "end": 259,
        "startLoc": {
          "line": 253,
          "column": 2,
          "position": 1838
        },
        "endLoc": {
          "line": 259,
          "column": 2,
          "position": 1922
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "const enhancedNetworkHealth: EnhancedNetworkHealth = {\n        ...networkHealth,\n        feeEstimates: {\n          fastestFee: fallbackFees.fastestFee,\n          halfHourFee: fallbackFees.halfHourFee,\n          hourFee: fallbackFees.hourFee,\n          economyFee: fallbackFees.economyFee,\n          minimumFee: fallbackFees.minimumFee\n        },\n        analysis: {\n          congestionPercentage: calculateCongestionPercentage(fallbackMempool, fallbackFees),\n          feeSpreadRatio: calculateFeeSpreadRatio(fallbackFees),\n          mempoolEfficiency: calculateMempoolEfficiency(fallbackMempool),\n          trafficLevel: determineTrafficLevel(fallbackMempool, fallbackFees)\n        }\n      };\n\n      networkStatusCache",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 374,
        "end": 391,
        "startLoc": {
          "line": 374,
          "column": 7,
          "position": 2914
        },
        "endLoc": {
          "line": 391,
          "column": 19,
          "position": 3044
        }
      },
      "secondFile": {
        "name": "src/app/api/mempool/network/status/route.ts",
        "start": 271,
        "end": 288,
        "startLoc": {
          "line": 271,
          "column": 5,
          "position": 2005
        },
        "endLoc": {
          "line": 288,
          "column": 16,
          "position": 2135
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ");\n      \n      const result = await processOnChainDataConcurrently(\n        'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',\n        '2023-01-01',\n        1.0,\n        {\n          maxConcurrentOperations: 5,\n          batchSize: 10,\n          enableRequestBatching: true,\n          enableCaching: true,\n        }\n      );\n      \n      const time = PerformanceMonitor.endMeasurement(measurementId);\n      \n      expect(result.transactions).toHaveLength(50);\n      expect(time).toBeLessThan(10000",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/performance/concurrentProcessing.performance.test.ts",
        "start": 370,
        "end": 387,
        "startLoc": {
          "line": 370,
          "column": 19,
          "position": 3082
        },
        "endLoc": {
          "line": 387,
          "column": 6,
          "position": 3190
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/performance/concurrentProcessing.performance.test.ts",
        "start": 333,
        "end": 350,
        "startLoc": {
          "line": 333,
          "column": 18,
          "position": 2776
        },
        "endLoc": {
          "line": 350,
          "column": 6,
          "position": 2884
        }
      }
    },
    {
      "format": "javascript",
      "lines": 181,
      "fragment": "={transactions}\n            expectedGrants={expectedGrants}\n            {...mockProps}\n          />\n        );\n      });\n      \n      expect(renderTime).toBeLessThan(100); // Should render in under 100ms\n      expect(screen.getByText(/50 transaction/)).toBeInTheDocument();\n    });\n\n    it('should render large dataset (100 transactions) within acceptable limits', () => {\n      const transactions = generateMockTransactions(100);\n      const expectedGrants = generateMockGrants(20);\n      \n      const renderTime = measureRenderTime(() => {\n        render(\n          <VestingTrackerResultsOptimized\n            transactions={transactions}\n            expectedGrants={expectedGrants}\n            {...mockProps}\n          />\n        );\n      });\n      \n      expect(renderTime).toBeLessThan(200); // Should render in under 200ms\n      expect(screen.getByText(/100 transaction/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Re-render Performance (React.memo effectiveness)', () => {\n    it('should minimize re-renders when props have not changed', async () => {\n      const transactions = generateMockTransactions(25);\n      const expectedGrants = generateMockGrants(5);\n      \n      let renderCount = 0;\n      const TestComponent = React.memo(() => {\n        renderCount++;\n        return (\n          <VestingTrackerResultsOptimized\n            transactions={transactions}\n            expectedGrants={expectedGrants}\n            {...mockProps}\n          />\n        );\n      });\n      \n      const { rerender } = render(<TestComponent />);\n      const initialRenderCount = renderCount;\n      \n      // Re-render with same props multiple times\n      rerender(<TestComponent />);\n      rerender(<TestComponent />);\n      rerender(<TestComponent />);\n      \n      // Due to React.memo, the component should not re-render if props haven't changed\n      expect(renderCount).toBe(initialRenderCount + 3); // Each rerender should increment\n    });\n\n    it('should compare optimized vs non-optimized component re-render performance', async () => {\n      const transactions = generateMockTransactions(50);\n      const expectedGrants = generateMockGrants(10);\n      \n      // Test non-optimized component\n      const { rerender: rerenderRegular } = render(\n        <VestingTrackerResults\n          transactions={transactions}\n          expectedGrants={expectedGrants}\n          {...mockProps}\n        />\n      );\n      \n      const regularTimes = await measureComponentUpdates(\n        rerenderRegular,\n        () => (\n          <VestingTrackerResults\n            transactions={[...transactions]} // New array reference\n            expectedGrants={expectedGrants}\n            {...mockProps}\n          />\n        ),\n        5\n      );\n      \n      // Test optimized component\n      const { rerender: rerenderOptimized } = render(\n        <VestingTrackerResultsOptimized\n          transactions={transactions}\n          expectedGrants={expectedGrants}\n          {...mockProps}\n        />\n      );\n      \n      const optimizedTimes = await measureComponentUpdates(\n        rerenderOptimized,\n        () => (\n          <VestingTrackerResultsOptimized\n            transactions={[...transactions]} // New array reference\n            expectedGrants={expectedGrants}\n            {...mockProps}\n          />\n        ),\n        5\n      );\n      \n      const avgRegular = regularTimes.reduce((a, b) => a + b, 0) / regularTimes.length;\n      const avgOptimized = optimizedTimes.reduce((a, b) => a + b, 0) / optimizedTimes.length;\n      \n      console.log(`Average re-render times - Regular: ${avgRegular.toFixed(2)}ms, Optimized: ${avgOptimized.toFixed(2)}ms`);\n      \n      // Optimized should be faster or similar\n      expect(avgOptimized).toBeLessThanOrEqual(avgRegular * 1.2); // Allow 20% tolerance for test environment\n    });\n  });\n\n  describe('Sorting Performance', () => {\n    it('should handle sorting large datasets efficiently', async () => {\n      const transactions = generateMockTransactions(100);\n      const expectedGrants = generateMockGrants(20);\n      \n      render(\n        <VestingTrackerResultsOptimized\n          transactions={transactions}\n          expectedGrants={expectedGrants}\n          {...mockProps}\n        />\n      );\n      \n      // Test sorting by different fields\n      const sortTests = [\n        { name: 'Year', pattern: /year/i },\n        { name: 'Date', pattern: /date/i },\n        { name: 'BTC', pattern: /btc/i },\n        { name: 'USD', pattern: /usd/i }\n      ];\n      \n      for (const sortTest of sortTests) {\n        const start = performance.now();\n        \n        const sortButtons = screen.getAllByRole('button', { name: sortTest.pattern });\n        const sortButton = sortButtons[0]; // Use the first matching button\n        \n        await act(async () => {\n          fireEvent.click(sortButton);\n        });\n        \n        const end = performance.now();\n        const sortTime = end - start;\n        \n        expect(sortTime).toBeLessThan(100); // Sorting should be under 100ms\n        \n        // Sort again to test direction change\n        const start2 = performance.now();\n        await act(async () => {\n          fireEvent.click(sortButton);\n        });\n        const end2 = performance.now();\n        const sortTime2 = end2 - start2;\n        \n        expect(sortTime2).toBeLessThan(100); // Direction change should also be fast\n      }\n    });\n  });\n\n  describe('Memory Usage Performance', () => {\n    it('should not leak memory during prop updates', async () => {\n      const initialTransactions = generateMockTransactions(20);\n      const expectedGrants = generateMockGrants(5);\n      \n      // Mock performance.memory if available\n      const mockMemory = {\n        usedJSHeapSize: 10000000,\n        totalJSHeapSize: 20000000,\n        jsHeapSizeLimit: 100000000\n      };\n      \n      let memoryBefore = mockMemory.usedJSHeapSize;\n      \n      const { rerender } = render(\n        <VestingTrackerResultsOptimized\n          transactions={initialTransactions",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/performance/componentPerformance.test.tsx",
        "start": 106,
        "end": 286,
        "startLoc": {
          "line": 106,
          "column": 13,
          "position": 1081
        },
        "endLoc": {
          "line": 286,
          "column": 20,
          "position": 2479
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/performance/componentPerformance.test.tsx",
        "start": 88,
        "end": 228,
        "startLoc": {
          "line": 88,
          "column": 13,
          "position": 950
        },
        "endLoc": {
          "line": 228,
          "column": 13,
          "position": 1989
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ", async () => {\n      const mockResponse1 = {\n        prices: [[1640995200000, 47000.50]]\n      };\n      const mockResponse2 = {\n        prices: [[1641081600000, 48000.75]]\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResponse1,\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResponse2,\n        } as Response);\n\n      // First batch",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 154,
        "end": 172,
        "startLoc": {
          "line": 154,
          "column": 42,
          "position": 1221
        },
        "endLoc": {
          "line": 172,
          "column": 15,
          "position": 1361
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 107,
        "end": 125,
        "startLoc": {
          "line": 107,
          "column": 41,
          "position": 842
        },
        "endLoc": {
          "line": 125,
          "column": 6,
          "position": 982
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ", async () => {\n      const mockResponse1 = {\n        prices: [[1640995200000, 47000.50]]\n      };\n      const mockResponse2 = {\n        prices: [[1641081600000, 48000.75]]\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResponse1,\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResponse2,\n        } as Response);\n\n      // Start multiple concurrent requests",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 279,
        "end": 297,
        "startLoc": {
          "line": 279,
          "column": 44,
          "position": 2291
        },
        "endLoc": {
          "line": 297,
          "column": 38,
          "position": 2431
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 107,
        "end": 125,
        "startLoc": {
          "line": 107,
          "column": 41,
          "position": 842
        },
        "endLoc": {
          "line": 125,
          "column": 6,
          "position": 982
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "]\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const pricePromise = OnChainPriceFetcher.fetchPriceForDate('2022-01-01');\n      jest.advanceTimersByTime(100);\n      const price = await pricePromise;\n\n      expect(price).toBe(47000",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 436,
        "end": 448,
        "startLoc": {
          "line": 436,
          "column": 9,
          "position": 3671
        },
        "endLoc": {
          "line": 448,
          "column": 6,
          "position": 3761
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/price-fetcher.test.ts",
        "start": 411,
        "end": 423,
        "startLoc": {
          "line": 411,
          "column": 2,
          "position": 3443
        },
        "endLoc": {
          "line": 423,
          "column": 9,
          "position": 3533
        }
      }
    },
    {
      "format": "typescript",
      "lines": 37,
      "fragment": "{\n      txid: 'a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890'.substring(0, 64),\n      version: 1,\n      locktime: 0,\n      vin: [{\n        txid: 'prev_tx_id',\n        vout: 0,\n        prevout: {\n          scriptpubkey: 'script',\n          scriptpubkey_asm: 'asm',\n          scriptpubkey_type: 'p2pkh',\n          scriptpubkey_address: '1SendingAddress',\n          value: 100000000\n        },\n        scriptsig: 'sig',\n        scriptsig_asm: 'sig_asm',\n        witness: [],\n        is_coinbase: false,\n        sequence: 4294967295\n      }],\n      vout: [{\n        scriptpubkey: 'script',\n        scriptpubkey_asm: 'asm',\n        scriptpubkey_type: 'p2pkh',\n        scriptpubkey_address: '1ReceivingAddress',\n        value: 50000000\n      }],\n      size: 225,\n      weight: 900,\n      fee: 1000,\n      status: {\n        confirmed: true,\n        block_height: 700000,\n        block_hash: 'block_hash',\n        block_time: 1640995200\n      }\n    };",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/mempool-api.test.ts",
        "start": 228,
        "end": 264,
        "startLoc": {
          "line": 228,
          "column": 2,
          "position": 1765
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 2006
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/mempool-api.test.ts",
        "start": 49,
        "end": 86,
        "startLoc": {
          "line": 49,
          "column": 7,
          "position": 465
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 708
        }
      }
    },
    {
      "format": "javascript",
      "lines": 74,
      "fragment": "={className} data-testid=\"info-icon\" {...props}>\n      <path d=\"info\" />\n    </svg>\n  ),\n  ChartBarIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"chart-icon\" {...props}>\n      <path d=\"chart\" />\n    </svg>\n  ),\n  ClockIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"clock-icon\" {...props}>\n      <path d=\"clock\" />\n    </svg>\n  ),\n  ExclamationTriangleIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"warning-icon\" {...props}>\n      <path d=\"warning\" />\n    </svg>\n  ),\n  MagnifyingGlassIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"magnifying-glass-icon\" {...props}>\n      <path d=\"magnifying-glass\" />\n    </svg>\n  ),\n  CalculatorIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"calculator-icon\" {...props}>\n      <path d=\"calculator\" />\n    </svg>\n  ),\n  CurrencyDollarIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"currency-dollar-icon\" {...props}>\n      <path d=\"currency-dollar\" />\n    </svg>\n  ),\n  CheckIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"check-icon\" {...props}>\n      <path d=\"check\" />\n    </svg>\n  ),\n  DocumentMagnifyingGlassIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"document-magnifying-glass-icon\" {...props}>\n      <path d=\"document-magnifying-glass\" />\n    </svg>\n  ),\n  PencilIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"pencil-icon\" {...props}>\n      <path d=\"pencil\" />\n    </svg>\n  ),\n  BanknotesIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"banknotes-icon\" {...props}>\n      <path d=\"banknotes\" />\n    </svg>\n  ),\n  LockClosedIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"lock-closed-icon\" {...props}>\n      <path d=\"lock-closed\" />\n    </svg>\n  ),\n  BoltIcon: ({ className, ...props }: any) => (\n    <svg className={className} data-testid=\"bolt-icon\" {...props}>\n      <path d=\"bolt\" />\n    </svg>\n  )\n}));\n\n// Mock the on-chain components - using optimized versions that match current implementation\nvi.mock('@/components/on-chain/VestingTrackerFormOptimized', () => ({\n  default: function MockVestingTrackerFormOptimized({ onSubmit }: any) {\n    return (\n      <div data-testid=\"vesting-tracker-form\">\n        <button\n          data-testid=\"submit-form\"\n          onClick={(",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 36,
        "end": 109,
        "startLoc": {
          "line": 36,
          "column": 10,
          "position": 305
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 1206
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 31,
        "end": 91,
        "startLoc": {
          "line": 31,
          "column": 10,
          "position": 239
        },
        "endLoc": {
          "line": 91,
          "column": 10,
          "position": 1033
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": ",\n        annotatedTransactions: [\n          {\n            txid: 'test-tx-1',\n            grantYear: 1,\n            type: 'Annual Award',\n            amountBTC: 1.0,\n            date: '2020-01-01',\n            isManuallyAnnotated: false,\n            valueAtTimeOfTx: 50000\n          }\n        ],\n        expectedGrants: [\n          {\n            grantYear: 1,\n            expectedDate: '2020-01-01',\n            expectedAmountBTC: 1.0,\n            actualAmountBTC: 1.0,\n            status: 'fulfilled' as const\n          }\n        ],\n        setFormData",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 558,
        "end": 579,
        "startLoc": {
          "line": 558,
          "column": 5,
          "position": 4789
        },
        "endLoc": {
          "line": 579,
          "column": 12,
          "position": 4910
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 447,
        "end": 468,
        "startLoc": {
          "line": 447,
          "column": 17,
          "position": 3947
        },
        "endLoc": {
          "line": 468,
          "column": 12,
          "position": 4068
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ", testUserAddress),\n    ];\n\n    const result = annotateTransactions(\n      transactions,\n      testUserAddress,\n      testVestingStart,\n      testAnnualGrant\n    );\n\n    expect(result.annotatedTransactions[0].grantYear).toBe(1);\n    expect(result.annotatedTransactions[0].type).toBe('Annual Grant');\n    expect(result.annotatedTransactions[0].matchScore).toBeLessThan(1.0);\n    expect(result.annotatedTransactions[0].matchScore).toBeGreaterThan(0.75);\n  });\n\n  it('should not match transaction that is just below threshold'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 155,
        "end": 171,
        "startLoc": {
          "line": 155,
          "column": 18,
          "position": 1398
        },
        "endLoc": {
          "line": 171,
          "column": 60,
          "position": 1524
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 134,
        "end": 150,
        "startLoc": {
          "line": 134,
          "column": 14,
          "position": 1205
        },
        "endLoc": {
          "line": 150,
          "column": 69,
          "position": 1331
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ", testUserAddress),\n    ];\n\n    const result = annotateTransactions(\n      transactions,\n      testUserAddress,\n      testVestingStart,\n      testAnnualGrant\n    );\n\n    expect(result.annotatedTransactions[0].grantYear).toBeNull();\n    expect(result.annotatedTransactions[0].type).toBe('Other Transaction');\n  });\n\n  it",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 227,
        "end": 241,
        "startLoc": {
          "line": 227,
          "column": 14,
          "position": 1955
        },
        "endLoc": {
          "line": 241,
          "column": 3,
          "position": 2040
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 176,
        "end": 189,
        "startLoc": {
          "line": 176,
          "column": 14,
          "position": 1593
        },
        "endLoc": {
          "line": 189,
          "column": 2,
          "position": 1676
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ", testUserAddress),\n    ];\n\n    const result = annotateTransactions(\n      transactions,\n      testUserAddress,\n      testVestingStart,\n      testAnnualGrant\n    );\n\n    expect(result.annotatedTransactions[0].grantYear).toBeNull();\n    expect(result.annotatedTransactions[0].type).toBe('Other Transaction');\n  });\n});\n\ndescribe('annotateTransactions - Edge Cases'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 246,
        "end": 261,
        "startLoc": {
          "line": 246,
          "column": 13,
          "position": 2109
        },
        "endLoc": {
          "line": 261,
          "column": 36,
          "position": 2199
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 176,
        "end": 191,
        "startLoc": {
          "line": 176,
          "column": 14,
          "position": 1593
        },
        "endLoc": {
          "line": 191,
          "column": 36,
          "position": 1683
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": ", () => {\n    const transactions = [\n      {\n        txid: 'test_tx',\n        grantYear: 1,\n        type: 'Annual Grant' as const,\n        isIncoming: true,\n        amountBTC: 1.0,\n        amountSats: 100_000_000,\n        date: '2023-01-01',\n        blockHeight: 800000,\n        valueAtTimeOfTx: null,\n        status: 'Confirmed' as const,\n        matchScore: 0.95,\n        isManuallyAnnotated: false,\n      },\n    ];\n\n    const expectedGrants: ExpectedGrant[] = [\n      {\n        year: 1,\n        expectedDate: '2023-01-01',\n        expectedAmountBTC: 1.0,\n        expectedAmountSats: 100_000_000,\n        isMatched: true,\n        matchedTxid: 'test_tx',\n        tolerance: {\n          dateRangeDays: 90,\n          amountPercentage: 20,\n        },\n      },\n    ]",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 449,
        "end": 480,
        "startLoc": {
          "line": 449,
          "column": 53,
          "position": 3814
        },
        "endLoc": {
          "line": 480,
          "column": 2,
          "position": 4026
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 394,
        "end": 425,
        "startLoc": {
          "line": 394,
          "column": 66,
          "position": 3383
        },
        "endLoc": {
          "line": 425,
          "column": 2,
          "position": 3595
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "]);\n\n    const result = applyManualAnnotations(transactions, expectedGrants, manualAnnotations);\n\n    expect(result.annotatedTransactions[0].grantYear).toBeNull();\n    expect(result.annotatedTransactions[0].type).toBe('Other Transaction');\n    expect(result.annotatedTransactions[1",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 546,
        "end": 552,
        "startLoc": {
          "line": 546,
          "column": 5,
          "position": 4569
        },
        "endLoc": {
          "line": 552,
          "column": 2,
          "position": 4638
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/annotateTransactions.test.ts",
        "start": 482,
        "end": 488,
        "startLoc": {
          "line": 482,
          "column": 2,
          "position": 4048
        },
        "endLoc": {
          "line": 488,
          "column": 2,
          "position": 4117
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ": CustomVestingEvent[] = [\n        { id: '1', timePeriod: 12, percentageVested: 25, label: '1 year' },\n        { id: '2', timePeriod: 24, percentageVested: 50, label: '2 years' },\n        { id: '3', timePeriod: 36, percentageVested: 75, label: '3 years' },\n        { id: '4', timePeriod: 48, percentageVested: 100, label: '4 years' },\n      ];\n\n      // Each percentage should be greater than the previous",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/calculators/__tests__/custom-vesting.test.ts",
        "start": 130,
        "end": 137,
        "startLoc": {
          "line": 130,
          "column": 7,
          "position": 1462
        },
        "endLoc": {
          "line": 137,
          "column": 55,
          "position": 1594
        }
      },
      "secondFile": {
        "name": "src/lib/calculators/__tests__/custom-vesting.test.ts",
        "start": 57,
        "end": 64,
        "startLoc": {
          "line": 57,
          "column": 13,
          "position": 617
        },
        "endLoc": {
          "line": 64,
          "column": 6,
          "position": 749
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ", async () => {\n      const user = userEvent.setup();\n      render(<VestingTrackerForm />);\n\n      const addressInput = screen.getByLabelText(/bitcoin address/i);\n      await user.type(addressInput, 'invalid');\n\n      await waitFor(() => {\n        expect(addressInput",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 212,
        "end": 220,
        "startLoc": {
          "line": 212,
          "column": 48,
          "position": 1992
        },
        "endLoc": {
          "line": 220,
          "column": 13,
          "position": 2073
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 131,
        "end": 139,
        "startLoc": {
          "line": 131,
          "column": 58,
          "position": 1229
        },
        "endLoc": {
          "line": 139,
          "column": 7,
          "position": 1310
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ", async () => {\n      const user = userEvent.setup();\n      render(<VestingTrackerForm />);\n\n      const addressInput = screen.getByLabelText(/bitcoin address/i);\n      await user.type(addressInput, 'invalid');\n\n      await waitFor(() => {\n        const",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 225,
        "end": 233,
        "startLoc": {
          "line": 225,
          "column": 48,
          "position": 2115
        },
        "endLoc": {
          "line": 233,
          "column": 6,
          "position": 2194
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 131,
        "end": 139,
        "startLoc": {
          "line": 131,
          "column": 58,
          "position": 1229
        },
        "endLoc": {
          "line": 139,
          "column": 7,
          "position": 1308
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport VestingTrackerForm from '../VestingTrackerForm';\nimport { useOnChainStore } from '@/stores/onChainStore';\n\n// Mock the store\njest.mock('@/stores/onChainStore');\nconst mockUseOnChainStore = useOnChainStore as jest.MockedFunction<typeof useOnChainStore>;\n\n// Mock validation functions\njest.mock('@/lib/on-chain/validation', () => ({\n  validateField: jest.fn((field: string, value: unknown) => {\n    if (field === 'address') {\n      if (!value || typeof value !== 'string' || value.length === 0) return 'Bitcoin address too short';\n      if (value.length < 26) return 'Bitcoin address too short';\n      return",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 7,
          "position": 201
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 3,
          "position": 201
        }
      }
    },
    {
      "format": "tsx",
      "lines": 23,
      "fragment": ", () => {\n  const mockSetFormData = jest.fn();\n  const mockValidateField = jest.fn();\n  const mockValidateAndFetch = jest.fn();\n\n  const defaultStoreState = {\n    address: '',\n    vestingStartDate: '',\n    annualGrantBtc: 0,\n    formErrors: {},\n    isLoading: false,\n    error: null,\n    setFormData: mockSetFormData,\n    validateField: mockValidateField,\n    validateAndFetch: mockValidateAndFetch\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseOnChainStore.mockReturnValue(defaultStoreState);\n  });\n\n  it",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 31,
        "end": 53,
        "startLoc": {
          "line": 31,
          "column": 43,
          "position": 314
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 477
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 34,
        "end": 56,
        "startLoc": {
          "line": 34,
          "column": 21,
          "position": 377
        },
        "endLoc": {
          "line": 56,
          "column": 9,
          "position": 540
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ", () => {\n    render(<VestingTrackerForm />);\n\n    expect(screen.getByLabelText(/bitcoin address/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/vesting start date/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/annual award amount/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /start tracking vesting grants/i })).toBeInTheDocument();\n  });\n\n  it('calls setFormData when address input changes'",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 53,
        "end": 62,
        "startLoc": {
          "line": 53,
          "column": 26,
          "position": 480
        },
        "endLoc": {
          "line": 62,
          "column": 47,
          "position": 583
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 57,
        "end": 66,
        "startLoc": {
          "line": 57,
          "column": 45,
          "position": 556
        },
        "endLoc": {
          "line": 66,
          "column": 37,
          "position": 659
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ");\n  });\n\n  it('enables submit button when form is valid', () => {\n    mockUseOnChainStore.mockReturnValue({\n      ...defaultStoreState,\n      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      vestingStartDate: '2023-01-01',\n      annualGrantBtc: 0.5\n    });\n\n    render(<VestingTrackerForm />);\n\n    const submitButton = screen.getByRole('button', { name: /start tracking vesting grants/i });\n    expect(submitButton).not.toBeDisabled();\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 76,
        "end": 91,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 724
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 834
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 409,
        "end": 424,
        "startLoc": {
          "line": 409,
          "column": 21,
          "position": 3590
        },
        "endLoc": {
          "line": 424,
          "column": 7,
          "position": 3700
        }
      }
    },
    {
      "format": "tsx",
      "lines": 39,
      "fragment": ", async () => {\n    const user = userEvent.setup();\n    mockUseOnChainStore.mockReturnValue({\n      ...defaultStoreState,\n      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      vestingStartDate: '2023-01-01',\n      annualGrantBtc: 0.5\n    });\n\n    render(<VestingTrackerForm />);\n\n    const submitButton = screen.getByRole('button', { name: /start tracking vesting grants/i });\n    await user.click(submitButton);\n\n    expect(mockValidateAndFetch).toHaveBeenCalled();\n  });\n\n  it('calls custom onSubmit when provided', async () => {\n    const mockOnSubmit = jest.fn();\n    const user = userEvent.setup();\n    \n    mockUseOnChainStore.mockReturnValue({\n      ...defaultStoreState,\n      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      vestingStartDate: '2023-01-01',\n      annualGrantBtc: 0.5\n    });\n\n    render(<VestingTrackerForm onSubmit={mockOnSubmit} />);\n\n    const submitButton = screen.getByRole('button', { name: /start tracking vesting grants/i });\n    await user.click(submitButton);\n\n    expect(mockOnSubmit).toHaveBeenCalledWith({\n      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      vestingStartDate: '2023-01-01',\n      annualGrantBtc: 0.5\n    });\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 116,
        "end": 154,
        "startLoc": {
          "line": 116,
          "column": 55,
          "position": 999
        },
        "endLoc": {
          "line": 154,
          "column": 2,
          "position": 1300
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 361,
        "end": 399,
        "startLoc": {
          "line": 361,
          "column": 44,
          "position": 3181
        },
        "endLoc": {
          "line": 399,
          "column": 7,
          "position": 3482
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ", () => {\n    render(<VestingTrackerForm />);\n\n    const addressInput = screen.getByLabelText(/bitcoin address/i);\n    const dateInput = screen.getByLabelText(/vesting start date/i);\n    const amountInput = screen.getByLabelText(/annual award amount/i);\n\n    expect(addressInput).toHaveAttribute('aria-label'",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.basic.test.tsx",
        "start": 156,
        "end": 163,
        "startLoc": {
          "line": 156,
          "column": 38,
          "position": 1309
        },
        "endLoc": {
          "line": 163,
          "column": 13,
          "position": 1383
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/VestingTrackerForm.test.tsx",
        "start": 195,
        "end": 202,
        "startLoc": {
          "line": 195,
          "column": 46,
          "position": 1822
        },
        "endLoc": {
          "line": 202,
          "column": 15,
          "position": 1896
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ";\n      \n      render(<OnChainTimelineVisualizer {...defaultProps} />);\n      \n      // Trigger resize event\n      fireEvent(window, new Event('resize'));\n      \n      await waitFor(() => {\n        const table = screen.getByRole('table');\n        expect(table).toBeInTheDocument();\n      });\n    });\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/OnChainTimelineVisualizer.test.tsx",
        "start": 202,
        "end": 214,
        "startLoc": {
          "line": 202,
          "column": 5,
          "position": 1656
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1746
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/OnChainTimelineVisualizer.test.tsx",
        "start": 187,
        "end": 200,
        "startLoc": {
          "line": 187,
          "column": 4,
          "position": 1540
        },
        "endLoc": {
          "line": 200,
          "column": 3,
          "position": 1631
        }
      }
    },
    {
      "format": "javascript",
      "lines": 139,
      "fragment": "}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('Unmatched')).toBeInTheDocument();\n        expect(screen.getByText('Year 2')).toBeInTheDocument();\n        expect(screen.getByText('Year 3')).toBeInTheDocument();\n      });\n    });\n\n    it('shows available grants in dropdown', async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        // Should show all grant years plus unmatched option\n        expect(screen.getAllByRole('option')).toHaveLength(4);\n      });\n    });\n\n    it('marks occupied grant years as disabled', async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const year3Option = screen.getByRole('option', { name: /Year 3/ });\n        expect(year3Option).toBeDisabled();\n        expect(screen.getByText('Occupied')).toBeInTheDocument();\n      });\n    });\n\n    it('closes dropdown when clicking outside', async () => {\n      render(\n        <div>\n          <ManualAnnotationOverride\n            transaction={mockTransaction}\n            availableGrants={mockExpectedGrants}\n            onUpdate={mockOnUpdate}\n          />\n          <div data-testid=\"outside-element\">Outside</div>\n        </div>\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      // Dropdown should be open\n      await waitFor(() => {\n        expect(screen.getByText('Unmatched')).toBeInTheDocument();\n      });\n\n      // Click outside\n      fireEvent.mouseDown(screen.getByTestId('outside-element'));\n\n      // Dropdown should close\n      await waitFor(() => {\n        expect(screen.queryByText('Unmatched')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('State updates', () => {\n    it('calls onUpdate when selection changes', async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const year2Option = screen.getByRole('option', { name: /Year 2/ });\n        fireEvent.click(year2Option);\n      });\n\n      expect(mockOnUpdate).toHaveBeenCalledWith('abc123def456ghi789', 2);\n    });\n\n    it('calls onUpdate with null for Unmatched selection', async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const unmatchedOption = screen.getByRole('option', { name: /Unmatched/ });\n        fireEvent.click(unmatchedOption);\n      });\n\n      expect(mockOnUpdate).toHaveBeenCalledWith('abc123def456ghi789', null);\n    });\n\n    it('updates local state when transaction prop changes', () => {\n      const { rerender } = render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      expect(screen.getByText('Year 1')).toBeInTheDocument();\n\n      const updatedTransaction = { ...mockTransaction, grantYear: 2 };\n      rerender(\n        <ManualAnnotationOverride\n          transaction={updatedTransaction",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 108,
        "end": 246,
        "startLoc": {
          "line": 108,
          "column": 16,
          "position": 757
        },
        "endLoc": {
          "line": 246,
          "column": 19,
          "position": 1810
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 94,
        "end": 195,
        "startLoc": {
          "line": 94,
          "column": 33,
          "position": 669
        },
        "endLoc": {
          "line": 195,
          "column": 16,
          "position": 1419
        }
      }
    },
    {
      "format": "javascript",
      "lines": 85,
      "fragment": "}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const year2Option = screen.getByRole('option', { name: /Year 2/ });\n        fireEvent.click(year2Option);\n      });\n\n      // Note: The feedback appears temporarily, so we'd need to test timing\n      // This is a simplified test that verifies the component doesn't crash\n      expect(mockOnUpdate).toHaveBeenCalled();\n    });\n\n    it('applies correct styling for manually annotated transactions', () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransactionManuallyAnnotated}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 2/ });\n      expect(dropdownButton).toHaveClass('bg-blue-50', 'text-blue-700');\n    });\n\n    it('applies correct styling for automatic annotations', () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      expect(dropdownButton).toHaveClass('bg-gray-50', 'text-gray-700');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA attributes', () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button');\n      expect(dropdownButton).toHaveAttribute('aria-selected');\n      expect(dropdownButton).toHaveClass('focus:outline-none', 'focus:ring-2');\n    });\n\n    it('supports keyboard navigation', () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button');\n      \n      // Should be focusable\n      dropdownButton.focus();\n      expect(dropdownButton).toHaveFocus();\n\n      // Enter key should open dropdown\n      fireEvent.keyDown(dropdownButton, { key: 'Enter' });\n      // Note: This would require additional keyboard handling implementation\n    });\n\n    it('has descriptive title for undo button', () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransactionManuallyAnnotated",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 316,
        "end": 400,
        "startLoc": {
          "line": 316,
          "column": 16,
          "position": 2301
        },
        "endLoc": {
          "line": 400,
          "column": 33,
          "position": 2869
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 82,
        "end": 165,
        "startLoc": {
          "line": 82,
          "column": 21,
          "position": 601
        },
        "endLoc": {
          "line": 165,
          "column": 16,
          "position": 1199
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ", async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        // Should show all grant years plus unmatched option",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 124,
        "end": 137,
        "startLoc": {
          "line": 124,
          "column": 37,
          "position": 888
        },
        "endLoc": {
          "line": 137,
          "column": 53,
          "position": 980
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 105,
        "end": 118,
        "startLoc": {
          "line": 105,
          "column": 30,
          "position": 734
        },
        "endLoc": {
          "line": 118,
          "column": 7,
          "position": 826
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ", async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 142,
        "end": 155,
        "startLoc": {
          "line": 142,
          "column": 41,
          "position": 1014
        },
        "endLoc": {
          "line": 155,
          "column": 6,
          "position": 1106
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 105,
        "end": 118,
        "startLoc": {
          "line": 105,
          "column": 30,
          "position": 734
        },
        "endLoc": {
          "line": 118,
          "column": 7,
          "position": 826
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ", async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const year2Option",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 192,
        "end": 205,
        "startLoc": {
          "line": 192,
          "column": 40,
          "position": 1397
        },
        "endLoc": {
          "line": 205,
          "column": 12,
          "position": 1491
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 105,
        "end": 155,
        "startLoc": {
          "line": 105,
          "column": 30,
          "position": 734
        },
        "endLoc": {
          "line": 155,
          "column": 12,
          "position": 1108
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ", async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const unmatchedOption",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 212,
        "end": 225,
        "startLoc": {
          "line": 212,
          "column": 51,
          "position": 1553
        },
        "endLoc": {
          "line": 225,
          "column": 16,
          "position": 1647
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 105,
        "end": 155,
        "startLoc": {
          "line": 105,
          "column": 30,
          "position": 734
        },
        "endLoc": {
          "line": 155,
          "column": 12,
          "position": 1108
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ", async () => {\n      render(\n        <ManualAnnotationOverride\n          transaction={mockTransaction}\n          availableGrants={mockExpectedGrants}\n          onUpdate={mockOnUpdate}\n        />\n      );\n\n      const dropdownButton = screen.getByRole('button', { name: /Year 1/ });\n      fireEvent.click(dropdownButton);\n\n      await waitFor(() => {\n        const year2Option = screen.getByRole('option', { name: /Year 2/ });\n        fireEvent.click(year2Option);\n      });\n\n      // Note: The feedback appears temporarily, so we'd need to test timing",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 313,
        "end": 330,
        "startLoc": {
          "line": 313,
          "column": 48,
          "position": 2278
        },
        "endLoc": {
          "line": 330,
          "column": 71,
          "position": 2410
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.test.tsx",
        "start": 105,
        "end": 209,
        "startLoc": {
          "line": 105,
          "column": 30,
          "position": 734
        },
        "endLoc": {
          "line": 209,
          "column": 7,
          "position": 1529
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "(result.current as any).annotatedTransactions = mockTransactions;\n        (result.current as any).expectedGrants = mockExpectedGrants;\n        (result.current as any).currentStep = 'complete';\n      });\n\n      // Test manual annotation update\n      act(() => {\n        result.current.updateManualAnnotation('tx2', 2);\n      });\n\n      // Verify applyManualAnnotations was called",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 131,
        "end": 141,
        "startLoc": {
          "line": 131,
          "column": 9,
          "position": 1081
        },
        "endLoc": {
          "line": 141,
          "column": 44,
          "position": 1174
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 95,
        "end": 105,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 739
        },
        "endLoc": {
          "line": 105,
          "column": 43,
          "position": 832
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "});\n\n      const { result } = renderHook(() => useOnChainStore());\n\n      // Setup initial state\n      act(() => {\n        (result.current as any).annotatedTransactions = mockTransactions;\n        (result.current as any).expectedGrants = mockExpectedGrants;\n        (result.current as any).currentStep = 'complete';\n      });\n\n      // Test that error doesn't crash the application",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 216,
        "end": 227,
        "startLoc": {
          "line": 216,
          "column": 7,
          "position": 1871
        },
        "endLoc": {
          "line": 227,
          "column": 49,
          "position": 1975
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 125,
        "end": 136,
        "startLoc": {
          "line": 125,
          "column": 7,
          "position": 1037
        },
        "endLoc": {
          "line": 136,
          "column": 33,
          "position": 1141
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "const { result } = renderHook(() => useOnChainStore());\n\n      // Setup initial state\n      act(() => {\n        (result.current as any).annotatedTransactions = mockTransactions;\n        (result.current as any).expectedGrants = mockExpectedGrants;\n        (result.current as any).currentStep = 'complete';\n      });\n\n      // Apply multiple manual annotations",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 240,
        "end": 249,
        "startLoc": {
          "line": 240,
          "column": 7,
          "position": 2067
        },
        "endLoc": {
          "line": 249,
          "column": 37,
          "position": 2165
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 127,
        "end": 136,
        "startLoc": {
          "line": 127,
          "column": 7,
          "position": 1043
        },
        "endLoc": {
          "line": 136,
          "column": 33,
          "position": 1141
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ", () => {\n      const { result } = renderHook(() => useOnChainStore());\n\n      // Setup initial state\n      act(() => {\n        (result.current as any).annotatedTransactions = mockTransactions;\n        (result.current as any).expectedGrants = mockExpectedGrants;\n        (result.current as any).currentStep = 'complete';\n      });\n\n      // Apply multiple changes to the same transaction",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 260,
        "end": 270,
        "startLoc": {
          "line": 260,
          "column": 57,
          "position": 2270
        },
        "endLoc": {
          "line": 270,
          "column": 50,
          "position": 2378
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 239,
        "end": 136,
        "startLoc": {
          "line": 239,
          "column": 73,
          "position": 2057
        },
        "endLoc": {
          "line": 136,
          "column": 33,
          "position": 1141
        }
      }
    },
    {
      "format": "tsx",
      "lines": 51,
      "fragment": "const mockTransactions: AnnotatedTransaction[] = [\n  {\n    txid: 'tx1',\n    grantYear: 1,\n    type: 'Annual Award',\n    isIncoming: true,\n    amountBTC: 0.5,\n    amountSats: 50000000,\n    date: '2023-01-15',\n    blockHeight: 123456,\n    valueAtTimeOfTx: 10000,\n    status: 'Confirmed',\n    matchScore: 0.85,\n    isManuallyAnnotated: false\n  },\n  {\n    txid: 'tx2',\n    grantYear: null,\n    type: 'Other Transaction',\n    isIncoming: true,\n    amountBTC: 0.25,\n    amountSats: 25000000,\n    date: '2023-06-15',\n    blockHeight: 123789,\n    valueAtTimeOfTx: 7500,\n    status: 'Confirmed',\n    isManuallyAnnotated: false\n  }\n];\n\nconst mockExpectedGrants: ExpectedGrant[] = [\n  {\n    year: 1,\n    expectedDate: '2023-01-01',\n    expectedAmountBTC: 0.5,\n    expectedAmountSats: 50000000,\n    isMatched: true,\n    matchedTxid: 'tx1',\n    tolerance: { dateRangeDays: 30, amountPercentage: 10 }\n  },\n  {\n    year: 2,\n    expectedDate: '2024-01-01',\n    expectedAmountBTC: 0.5,\n    expectedAmountSats: 50000000,\n    isMatched: false,\n    tolerance: { dateRangeDays: 30, amountPercentage: 10 }\n  }\n];\n\ndescribe('TrackerPage Integration Tests'",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 105,
        "end": 155,
        "startLoc": {
          "line": 105,
          "column": 1,
          "position": 1159
        },
        "endLoc": {
          "line": 155,
          "column": 32,
          "position": 1495
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/__tests__/ManualAnnotationOverride.integration.test.tsx",
        "start": 31,
        "end": 81,
        "startLoc": {
          "line": 31,
          "column": 1,
          "position": 290
        },
        "endLoc": {
          "line": 81,
          "column": 45,
          "position": 626
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ");\n\n      expect(screen.getByText('Automatic Matching')).toBeInTheDocument();\n      expect(screen.getByText('Manual Overrides')).toBeInTheDocument();\n      expect(screen.getByText('Historical Values')).toBeInTheDocument();\n      expect(screen.getByText('Visual Timeline')).toBeInTheDocument();\n      expect(screen.getByText('Privacy Focused')).toBeInTheDocument();\n      expect(screen.getByText('Real-time Updates')).toBeInTheDocument();\n    });\n\n    it('renders privacy disclaimer with collapsible details'",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 193,
        "end": 203,
        "startLoc": {
          "line": 193,
          "column": 3,
          "position": 1835
        },
        "endLoc": {
          "line": 203,
          "column": 54,
          "position": 1944
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 680,
        "end": 689,
        "startLoc": {
          "line": 680,
          "column": 2,
          "position": 5667
        },
        "endLoc": {
          "line": 689,
          "column": 60,
          "position": 5775
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ");\n\n      fireEvent.click(expandButton);\n\n      expect(screen.getByText('Recommended Privacy Practices')).toBeInTheDocument();\n      expect(screen.getByText('External API Usage')).toBeInTheDocument();\n      expect(screen.getByText('Session-Only Processing')).toBeInTheDocument();\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 207,
        "end": 215,
        "startLoc": {
          "line": 207,
          "column": 2,
          "position": 1988
        },
        "endLoc": {
          "line": 215,
          "column": 6,
          "position": 2052
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/__tests__/error-handling-integration.test.tsx",
        "start": 697,
        "end": 704,
        "startLoc": {
          "line": 697,
          "column": 2,
          "position": 5872
        },
        "endLoc": {
          "line": 704,
          "column": 30,
          "position": 5935
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ", () => {\n      const storeWithResults = {\n        ...mockStore,\n        annotatedTransactions: mockTransactions,\n        expectedGrants: mockExpectedGrants,\n        currentStep: 'complete' as const\n      };\n      vi.mocked(useOnChainStore).mockReturnValue(storeWithResults);\n\n      render(<TrackerPage />);\n\n      expect(screen.getByTestId('timeline-visualizer'",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 315,
        "end": 326,
        "startLoc": {
          "line": 315,
          "column": 55,
          "position": 2891
        },
        "endLoc": {
          "line": 326,
          "column": 22,
          "position": 2975
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 299,
        "end": 310,
        "startLoc": {
          "line": 299,
          "column": 51,
          "position": 2755
        },
        "endLoc": {
          "line": 310,
          "column": 26,
          "position": 2839
        }
      }
    },
    {
      "format": "javascript",
      "lines": 32,
      "fragment": "={() => onSubmit({\n          address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        })}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Processing...' : 'Start Analysis'}\n      </button>\n      {Object.entries(errors || {}).map(([key, message]) => (\n        <div key={key} data-testid={`error-${key}`}>{message}</div>\n      ))}\n    </div>\n  )\n}));\n\njest.mock('@/components/on-chain/VestingTrackerResultsOptimized', () => ({\n  default: ({ transactions, expectedGrants, isLoading, error, onRetry, onUpdateAnnotation }: any) => (\n    <div data-testid=\"vesting-tracker-results\">\n      {isLoading && <div data-testid=\"results-loading\">Loading results...</div>}\n      {error && (\n        <div data-testid=\"results-error\">\n          <p>{error}</p>\n          <button data-testid=\"retry-button\" onClick={onRetry}>Retry</button>\n        </div>\n      )}\n      {transactions && transactions.length > 0 && (\n        <div data-testid=\"results-content\">\n          <div data-testid=\"transaction-count\">{transactions.length} transactions</div>\n          {transactions.map((tx: AnnotatedTransaction) => (\n            <div key={tx.txid} data-testid={`transaction-${tx.txid}`}>\n              <span data-testid={`tx-amount-",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 41,
        "end": 72,
        "startLoc": {
          "line": 41,
          "column": 8,
          "position": 342
        },
        "endLoc": {
          "line": 72,
          "column": 12,
          "position": 715
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 38,
        "end": 71,
        "startLoc": {
          "line": 38,
          "column": 8,
          "position": 398
        },
        "endLoc": {
          "line": 71,
          "column": 10,
          "position": 793
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ", () => ({\n  default: ({ transactions, expectedGrants, isLoading, error, onRetry, onUpdateAnnotation }: any) => (\n    <div data-testid=\"vesting-tracker-results\">\n      {isLoading && <div data-testid=\"results-loading\">Loading results...</div>}\n      {error && (\n        <div data-testid=\"results-error\">\n          <p>{error}</p>\n          <button data-testid=\"retry-button\" onClick={onRetry}>Retry</button>\n        </div>\n      )}\n      {transactions &&",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 57,
        "end": 67,
        "startLoc": {
          "line": 57,
          "column": 55,
          "position": 477
        },
        "endLoc": {
          "line": 67,
          "column": 3,
          "position": 620
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 55,
        "end": 65,
        "startLoc": {
          "line": 55,
          "column": 46,
          "position": 532
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 674
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "transactions.length > 0 && (\n        <div data-testid=\"results-content\">\n          <div data-testid=\"transaction-count\">{transactions.length} transactions</div>\n          {transactions.map((tx: AnnotatedTransaction) => (\n            <div key={tx.txid} data-testid={`transaction-${tx.txid}`}>\n              <",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 67,
        "end": 72,
        "startLoc": {
          "line": 67,
          "column": 2,
          "position": 622
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 709
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 65,
        "end": 70,
        "startLoc": {
          "line": 65,
          "column": 2,
          "position": 673
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 760
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": ",\n    expectedAmountBTC: 0.5,\n    expectedAmountSats: 50000000,\n    isMatched: false,\n    tolerance: { dateRangeDays: 30, amountPercentage: 10 }\n  }\n];\n\ndescribe('TrackerPage Integration Tests', () => {\n  const mockStore = {\n    address: '',\n    vestingStartDate: '',\n    annualGrantBtc: 0,\n    annotatedTransactions: [],\n    expectedGrants: [],\n    manualAnnotations: new Map(),\n    isLoading: false,\n    error: null,\n    currentStep: 'idle' as const,\n    formErrors: {},\n    setFormData: jest",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 217,
        "end": 237,
        "startLoc": {
          "line": 217,
          "column": 13,
          "position": 1980
        },
        "endLoc": {
          "line": 237,
          "column": 5,
          "position": 2135
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 147,
        "end": 167,
        "startLoc": {
          "line": 147,
          "column": 13,
          "position": 1444
        },
        "endLoc": {
          "line": 167,
          "column": 3,
          "position": 1599
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "= {\n        ...mockStore,\n        annotatedTransactions: mockAnnotatedTransactions.map(tx => \n          tx.txid === 'tx2_other_transaction' \n            ? { ...tx, grantYear: 2, type: 'Annual Award' as const, isManuallyAnnotated: true }\n            : tx\n        ),\n        expectedGrants: mockExpectedGrants,\n        manualAnnotations: new Map([['tx2_other_transaction', 2]]),\n        currentStep: 'complete' as const\n      };\n      \n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 668,
        "end": 680,
        "startLoc": {
          "line": 668,
          "column": 2,
          "position": 5715
        },
        "endLoc": {
          "line": 680,
          "column": 6,
          "position": 5831
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 641,
        "end": 652,
        "startLoc": {
          "line": 641,
          "column": 2,
          "position": 5476
        },
        "endLoc": {
          "line": 652,
          "column": 5,
          "position": 5590
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "};\n      jest.mocked(useOnChainStore).mockReturnValue(storeWithPartialData);\n\n      render(<TrackerPage />);\n\n      // Results should still be displayed\n      expect(screen.getByTestId('results-content')).toBeInTheDocument();\n      expect(screen.getByTestId('transaction-count')).toHaveTextContent('3 transactions');\n      \n      // All transactions should be shown regardless of missing price data",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 800,
        "end": 809,
        "startLoc": {
          "line": 800,
          "column": 7,
          "position": 6767
        },
        "endLoc": {
          "line": 809,
          "column": 69,
          "position": 6835
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/integration.test.tsx",
        "start": 474,
        "end": 483,
        "startLoc": {
          "line": 474,
          "column": 7,
          "position": 4082
        },
        "endLoc": {
          "line": 483,
          "column": 56,
          "position": 4150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": ", () => {\n  const mockStore = {\n    address: '',\n    vestingStartDate: '',\n    annualGrantBtc: 0,\n    annotatedTransactions: [],\n    expectedGrants: [],\n    manualAnnotations: new Map(),\n    isLoading: false,\n    error: null,\n    currentStep: 'idle' as const,\n    formErrors: {},\n    setFormData: jest.fn(),\n    validateAndFetch: jest.fn(),\n    updateManualAnnotation: jest.fn(),\n    resetTracker: jest.fn(),\n    retryOperation: jest.fn()\n  };\n\n  beforeEach",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/__tests__/integration-simple.test.tsx",
        "start": 37,
        "end": 56,
        "startLoc": {
          "line": 37,
          "column": 38,
          "position": 465
        },
        "endLoc": {
          "line": 56,
          "column": 11,
          "position": 624
        }
      },
      "secondFile": {
        "name": "src/app/track/__tests__/page.test.tsx",
        "start": 155,
        "end": 244,
        "startLoc": {
          "line": 155,
          "column": 32,
          "position": 1496
        },
        "endLoc": {
          "line": 244,
          "column": 6,
          "position": 2191
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n            code: 'EXTERNAL_API_ERROR',\n            source: apiResult.source\n          },\n          { \n            status: apiResult.retryAfter ? 429 : 502,\n            headers: apiResult.retryAfter ? \n              { 'Retry-After': Math.ceil(apiResult.retryAfter / 1000).toString() } : \n              {}\n          }\n        );\n      }\n\n      const data",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api/coingecko/route.ts",
        "start": 74,
        "end": 87,
        "startLoc": {
          "line": 74,
          "column": 38,
          "position": 606
        },
        "endLoc": {
          "line": 87,
          "column": 5,
          "position": 705
        }
      },
      "secondFile": {
        "name": "src/app/api/mempool/network/route.ts",
        "start": 33,
        "end": 46,
        "startLoc": {
          "line": 33,
          "column": 38,
          "position": 244
        },
        "endLoc": {
          "line": 46,
          "column": 18,
          "position": 343
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", async () => {\n      const { result } = renderHook(() => useOnChainStore());\n\n      // Set valid form data\n      act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      // Mock price fetching failure but transaction fetching success",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 222,
        "end": 234,
        "startLoc": {
          "line": 222,
          "column": 63,
          "position": 1813
        },
        "endLoc": {
          "line": 234,
          "column": 64,
          "position": 1903
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 194,
        "end": 206,
        "startLoc": {
          "line": 194,
          "column": 40,
          "position": 1580
        },
        "endLoc": {
          "line": 206,
          "column": 20,
          "position": 1670
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      await act(async () => {\n        await result.current.validateAndFetch();\n      });\n\n      // Apply manual annotation",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 302,
        "end": 314,
        "startLoc": {
          "line": 302,
          "column": 7,
          "position": 2501
        },
        "endLoc": {
          "line": 314,
          "column": 27,
          "position": 2583
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 266,
        "end": 278,
        "startLoc": {
          "line": 266,
          "column": 7,
          "position": 2170
        },
        "endLoc": {
          "line": 278,
          "column": 24,
          "position": 2252
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      await act(async () => {\n        await result.current.validateAndFetch();\n      });\n\n      // Apply manual annotation\n      act(() => {\n        result.current.updateManualAnnotation('tx2_other_amount', 2);\n      });\n\n      expect(result.current.manualAnnotations.get('tx2_other_amount')).toBe(2);\n\n      // Trigger re-analysis (e.g., retry after error)",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 340,
        "end": 359,
        "startLoc": {
          "line": 340,
          "column": 7,
          "position": 2823
        },
        "endLoc": {
          "line": 359,
          "column": 49,
          "position": 2960
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 266,
        "end": 321,
        "startLoc": {
          "line": 266,
          "column": 7,
          "position": 2170
        },
        "endLoc": {
          "line": 321,
          "column": 28,
          "position": 2638
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", async () => {\n      const { result } = renderHook(() => useOnChainStore());\n\n      // Set valid form data\n      act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      // Mock initial failure",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 373,
        "end": 385,
        "startLoc": {
          "line": 373,
          "column": 44,
          "position": 3105
        },
        "endLoc": {
          "line": 385,
          "column": 24,
          "position": 3195
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 194,
        "end": 206,
        "startLoc": {
          "line": 194,
          "column": 40,
          "position": 1580
        },
        "endLoc": {
          "line": 206,
          "column": 20,
          "position": 1670
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      await act(async () => {\n        await result.current.validateAndFetch();\n      });\n\n      // Add manual annotation",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 492,
        "end": 504,
        "startLoc": {
          "line": 492,
          "column": 7,
          "position": 4093
        },
        "endLoc": {
          "line": 504,
          "column": 25,
          "position": 4175
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 266,
        "end": 278,
        "startLoc": {
          "line": 266,
          "column": 7,
          "position": 2170
        },
        "endLoc": {
          "line": 278,
          "column": 24,
          "position": 2252
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      await act(async () => {\n        await result.current.validateAndFetch();\n      });\n\n      expect",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 537,
        "end": 549,
        "startLoc": {
          "line": 537,
          "column": 7,
          "position": 4528
        },
        "endLoc": {
          "line": 549,
          "column": 7,
          "position": 4610
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 266,
        "end": 278,
        "startLoc": {
          "line": 266,
          "column": 7,
          "position": 2170
        },
        "endLoc": {
          "line": 278,
          "column": 24,
          "position": 2252
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ", async () => {\n      const { result } = renderHook(() => useOnChainStore());\n\n      act(() => {\n        result.current.setFormData({\n          address: '1TestAddress',\n          vestingStartDate: '2023-01-01',\n          annualGrantBtc: 0.5\n        });\n      });\n\n      // Mock initial failure",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 639,
        "end": 650,
        "startLoc": {
          "line": 639,
          "column": 54,
          "position": 5358
        },
        "endLoc": {
          "line": 650,
          "column": 24,
          "position": 5445
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/onChainStore.integration.test.ts",
        "start": 449,
        "end": 460,
        "startLoc": {
          "line": 449,
          "column": 46,
          "position": 3720
        },
        "endLoc": {
          "line": 460,
          "column": 46,
          "position": 3807
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "expect(result.current.selectedScheme).toBeNull();\n      expect(result.current.startingYear).toBe(2020);\n      expect(result.current.costBasisMethod).toBe('average');\n      expect(result.current.schemeCustomizations).toEqual({});\n      expect(result.current.historicalPrices).toEqual({});\n      expect(result.current.historicalResults",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.test.ts",
        "start": 366,
        "end": 371,
        "startLoc": {
          "line": 366,
          "column": 7,
          "position": 3203
        },
        "endLoc": {
          "line": 371,
          "column": 18,
          "position": 3290
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.test.ts",
        "start": 104,
        "end": 109,
        "startLoc": {
          "line": 104,
          "column": 7,
          "position": 738
        },
        "endLoc": {
          "line": 109,
          "column": 20,
          "position": 825
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "import { act, renderHook } from '@testing-library/react';\nimport { useHistoricalCalculatorStore } from '../historicalCalculatorStore';\nimport { HistoricalBitcoinAPI } from '@/lib/historical-bitcoin-api';\nimport { BitcoinAPI } from '@/lib/bitcoin-api';\nimport { VestingScheme, BitcoinYearlyPrices } from '@/types/vesting';\n\n// Mock the APIs\njest.mock('@/lib/historical-bitcoin-api');\njest.mock('@/lib/bitcoin-api');\n\nconst mockHistoricalBitcoinAPI = HistoricalBitcoinAPI as jest.Mocked<typeof HistoricalBitcoinAPI>;\nconst mockBitcoinAPI = BitcoinAPI as jest.Mocked<typeof BitcoinAPI>;\n\n// Real vesting scheme from the existing system",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.integration.test.ts",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 48,
          "position": 132
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.test.ts",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 35,
          "position": 132
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ", async () => {\n    const { result } = renderHook(() => useHistoricalCalculatorStore());\n    \n    // Setup initial state\n    await act(async () => {\n      result.current.setStartingYear(2020);\n      await new Promise(resolve => setTimeout(resolve, 200));\n      await result.current.fetchCurrentBitcoinPrice();\n      result",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.integration.test.ts",
        "start": 214,
        "end": 222,
        "startLoc": {
          "line": 214,
          "column": 55,
          "position": 1805
        },
        "endLoc": {
          "line": 222,
          "column": 7,
          "position": 1904
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.integration.test.ts",
        "start": 184,
        "end": 192,
        "startLoc": {
          "line": 184,
          "column": 53,
          "position": 1486
        },
        "endLoc": {
          "line": 192,
          "column": 2,
          "position": 1585
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "await act(async () => {\n      result.current.setStartingYear(2020);\n      await new Promise(resolve => setTimeout(resolve, 200));\n      await result.current.fetchCurrentBitcoinPrice();\n      result.current.setSelectedScheme(bitcoinPioneerScheme);\n      await new Promise(resolve => setTimeout(resolve, 200));\n    });\n    \n    const results2020",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.integration.test.ts",
        "start": 261,
        "end": 269,
        "startLoc": {
          "line": 261,
          "column": 5,
          "position": 2273
        },
        "endLoc": {
          "line": 269,
          "column": 12,
          "position": 2372
        }
      },
      "secondFile": {
        "name": "src/stores/__tests__/historicalCalculatorStore.integration.test.ts",
        "start": 218,
        "end": 226,
        "startLoc": {
          "line": 218,
          "column": 5,
          "position": 1846
        },
        "endLoc": {
          "line": 226,
          "column": 15,
          "position": 1945
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ");\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const formatted = formatZodError(error);\n        const firstError = formatted[0];\n        throw new ValidationError(\n          firstError?.message ?? 'Validation failed',\n          firstError?.field ?? 'unknown',\n          firstError?.code ?? 'invalid'\n        );\n      }\n      throw error;\n    }\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/validation/schemas.ts",
        "start": 503,
        "end": 517,
        "startLoc": {
          "line": 503,
          "column": 4,
          "position": 4557
        },
        "endLoc": {
          "line": 517,
          "column": 2,
          "position": 4675
        }
      },
      "secondFile": {
        "name": "src/lib/validation/schemas.ts",
        "start": 469,
        "end": 483,
        "startLoc": {
          "line": 469,
          "column": 5,
          "position": 4247
        },
        "endLoc": {
          "line": 483,
          "column": 2,
          "position": 4365
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw createToolError('timeout', 'API_TIMEOUT', error);\n        }\n        if (error.message.includes('fetch')) {\n          throw createToolError('network', 'NETWORK_ERROR', error);\n        }\n      }\n\n      // Re-throw tool errors\n      if (error && typeof error === 'object' && 'type' in error) {\n        throw error;\n      }\n\n      // Unknown error\n      throw createToolError('unknown', 'UNKNOWN_ERROR', error instanceof Error ? error : undefined);\n    }\n  }\n\n  /**\n   * Verify an existing timestamp proof\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/timestampService.ts",
        "start": 148,
        "end": 169,
        "startLoc": {
          "line": 148,
          "column": 7,
          "position": 1168
        },
        "endLoc": {
          "line": 169,
          "column": 6,
          "position": 1329
        }
      },
      "secondFile": {
        "name": "src/lib/services/transactionService.ts",
        "start": 272,
        "end": 293,
        "startLoc": {
          "line": 272,
          "column": 7,
          "position": 2216
        },
        "endLoc": {
          "line": 293,
          "column": 6,
          "position": 2377
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ", 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n   * Get processing statistics\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/secureFileHandler.ts",
        "start": 402,
        "end": 410,
        "startLoc": {
          "line": 402,
          "column": 4,
          "position": 3160
        },
        "endLoc": {
          "line": 410,
          "column": 6,
          "position": 3247
        }
      },
      "secondFile": {
        "name": "src/lib/services/timestampService.ts",
        "start": 295,
        "end": 303,
        "startLoc": {
          "line": 295,
          "column": 8,
          "position": 2473
        },
        "endLoc": {
          "line": 303,
          "column": 6,
          "position": 2559
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", {\n        next: { revalidate: 30 }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      this.setCachedData(cacheKey, data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching fee estimates:'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/networkService.ts",
        "start": 50,
        "end": 62,
        "startLoc": {
          "line": 50,
          "column": 19,
          "position": 550
        },
        "endLoc": {
          "line": 62,
          "column": 32,
          "position": 657
        }
      },
      "secondFile": {
        "name": "src/lib/services/networkService.ts",
        "start": 27,
        "end": 39,
        "startLoc": {
          "line": 27,
          "column": 10,
          "position": 340
        },
        "endLoc": {
          "line": 39,
          "column": 31,
          "position": 447
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "getCachedData<T>(key: string): T | null {\n    const cached = this.cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n      return cached.data as T;\n    }\n    return null;\n  }\n\n  /**\n   * Cache data with timestamp\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/addressService.ts",
        "start": 73,
        "end": 83,
        "startLoc": {
          "line": 73,
          "column": 2,
          "position": 457
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 549
        }
      },
      "secondFile": {
        "name": "src/lib/services/networkService.ts",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 2,
          "position": 112
        },
        "endLoc": {
          "line": 17,
          "column": 8,
          "position": 204
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "};\n\n    } catch (error) {\n      // Handle specific error types\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw createToolError('timeout', 'API_TIMEOUT', error);\n        }\n        if (error.message.includes('fetch')) {\n          throw createToolError('network', 'NETWORK_ERROR', error);\n        }\n      }\n\n      // Re-throw tool errors\n      if (error && typeof error === 'object' && 'type' in error) {\n        throw error;\n      }\n\n      // Unknown error\n      throw createToolError('unknown', 'UNKNOWN_ERROR', error instanceof Error ? error : undefined);\n    }\n  }\n\n  /**\n   * Get blockchain explorer URLs for an address\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/addressService.ts",
        "start": 371,
        "end": 396,
        "startLoc": {
          "line": 371,
          "column": 7,
          "position": 3004
        },
        "endLoc": {
          "line": 396,
          "column": 6,
          "position": 3184
        }
      },
      "secondFile": {
        "name": "src/lib/services/timestampService.ts",
        "start": 144,
        "end": 293,
        "startLoc": {
          "line": 144,
          "column": 7,
          "position": 1149
        },
        "endLoc": {
          "line": 293,
          "column": 6,
          "position": 2377
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": ";\n  }\n\n  /**\n   * Copy text to clipboard with fallback\n   */\n  static async copyToClipboard(text: string): Promise<boolean> {\n    try {\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(text);\n        return true;\n      } else {\n        // Fallback for older browsers or non-HTTPS\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'absolute';\n        textArea.style.left = '-9999px';\n        document.body.appendChild(textArea);\n        textArea.select();\n        const successful = document.execCommand('copy');\n        document.body.removeChild(textArea);\n        return successful;\n      }\n    } catch (error) {\n      console.error('Failed to copy to clipboard:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if address appears to be a business/exchange address\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/services/addressService.ts",
        "start": 411,
        "end": 442,
        "startLoc": {
          "line": 411,
          "column": 2,
          "position": 3328
        },
        "endLoc": {
          "line": 442,
          "column": 6,
          "position": 3549
        }
      },
      "secondFile": {
        "name": "src/lib/services/transactionService.ts",
        "start": 353,
        "end": 381,
        "startLoc": {
          "line": 353,
          "column": 8,
          "position": 2909
        },
        "endLoc": {
          "line": 381,
          "column": 2,
          "position": 3128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ".sort((a, b) => {\n            if (a.priority !== b.priority) {\n              return b.priority - a.priority;\n            }\n            return a.timestamp - b.timestamp;\n          });\n          \n          this.queues.set(service, currentQueue",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/security/requestQueueManager.ts",
        "start": 185,
        "end": 192,
        "startLoc": {
          "line": 185,
          "column": 13,
          "position": 1538
        },
        "endLoc": {
          "line": 192,
          "column": 13,
          "position": 1617
        }
      },
      "secondFile": {
        "name": "src/lib/security/requestQueueManager.ts",
        "start": 103,
        "end": 110,
        "startLoc": {
          "line": 103,
          "column": 6,
          "position": 838
        },
        "endLoc": {
          "line": 110,
          "column": 6,
          "position": 916
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "<T>(\n  namespace: string,\n  key: string,\n  fetcher?: () => Promise<T>,\n  options?: {\n    ttl?: number;\n    staleWhileRevalidate?: number;\n    force?: boolean;\n  }\n): Promise<T | null> {\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/security/enhancedCacheManager.ts",
        "start": 361,
        "end": 371,
        "startLoc": {
          "line": 361,
          "column": 14,
          "position": 2833
        },
        "endLoc": {
          "line": 371,
          "column": 7,
          "position": 2917
        }
      },
      "secondFile": {
        "name": "src/lib/security/enhancedCacheManager.ts",
        "start": 93,
        "end": 103,
        "startLoc": {
          "line": 93,
          "column": 4,
          "position": 739
        },
        "endLoc": {
          "line": 103,
          "column": 6,
          "position": 824
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "fn(...args);\n        const duration = performance.now() - start;\n        this.recordMetric(`${name}_duration`, duration, 'timing');\n        return result;\n      } catch (error) {\n        const duration = performance.now() - start;\n        this.recordMetric(`${name}_error_duration`, duration, 'timing');\n        throw error;\n      }\n    }) as T;\n  }\n\n  // Get current memory usage",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/performance/performance-monitor.ts",
        "start": 139,
        "end": 151,
        "startLoc": {
          "line": 139,
          "column": 2,
          "position": 1309
        },
        "endLoc": {
          "line": 151,
          "column": 28,
          "position": 1430
        }
      },
      "secondFile": {
        "name": "src/lib/performance/performance-monitor.ts",
        "start": 117,
        "end": 129,
        "startLoc": {
          "line": 117,
          "column": 2,
          "position": 1075
        },
        "endLoc": {
          "line": 129,
          "column": 41,
          "position": 1196
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "const fallbackPrices: Record<number, number> = {\n      2015: 264,\n      2016: 574,\n      2017: 4951,\n      2018: 7532,\n      2019: 7179,\n      2020: 11111,\n      2021: 47686,\n      2022: 31717,\n      2023: 29234,\n      2024: 65000,\n      2025: 105000,\n    };\n\n    return",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/price-fetcher.ts",
        "start": 408,
        "end": 422,
        "startLoc": {
          "line": 408,
          "column": 5,
          "position": 3673
        },
        "endLoc": {
          "line": 422,
          "column": 7,
          "position": 3773
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/price-fetcher.ts",
        "start": 41,
        "end": 55,
        "startLoc": {
          "line": 41,
          "column": 5,
          "position": 410
        },
        "endLoc": {
          "line": 55,
          "column": 66,
          "position": 511
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "{\n  // Calculate incoming amount for this transaction\n  const incomingAmount = transaction.vout\n    .filter(output => output.scriptpubkey_address === userAddress)\n    .reduce((sum, output) => sum + output.value, 0);\n\n  if (incomingAmount === 0) {\n    return 0; // Not an incoming transaction\n  }\n\n  const transactionDate",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 86,
        "end": 96,
        "startLoc": {
          "line": 86,
          "column": 2,
          "position": 655
        },
        "endLoc": {
          "line": 96,
          "column": 16,
          "position": 743
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 278,
        "end": 288,
        "startLoc": {
          "line": 278,
          "column": 2,
          "position": 1834
        },
        "endLoc": {
          "line": 288,
          "column": 10,
          "position": 1922
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ") {\n    if (!matches.has(match.txid) && !usedGrants.has(match.grantYear)) {\n      matches.set(match.txid, {\n        grantYear: match.grantYear,\n        matchScore: match.matchScore,\n      });\n      usedGrants.add(match.grantYear);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Main annotation function that processes transactions and matches them to expected grants\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 175,
        "end": 190,
        "startLoc": {
          "line": 175,
          "column": 11,
          "position": 1471
        },
        "endLoc": {
          "line": 190,
          "column": 4,
          "position": 1566
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 379,
        "end": 391,
        "startLoc": {
          "line": 379,
          "column": 12,
          "position": 2694
        },
        "endLoc": {
          "line": 391,
          "column": 2,
          "position": 2790
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ");\n\n  // Filter for incoming transactions only\n  const incomingTransactions = transactions.filter(tx => {\n    const incomingAmount = tx.vout\n      .filter(output => output.scriptpubkey_address === userAddress)\n      .reduce((sum, output) => sum + output.value, 0);\n    return incomingAmount > 0;\n  });\n\n  // Find best matches",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 213,
        "end": 223,
        "startLoc": {
          "line": 213,
          "column": 17,
          "position": 1748
        },
        "endLoc": {
          "line": 223,
          "column": 21,
          "position": 1843
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 422,
        "end": 432,
        "startLoc": {
          "line": 422,
          "column": 12,
          "position": 2996
        },
        "endLoc": {
          "line": 432,
          "column": 49,
          "position": 3093
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ";\n  });\n\n  // Update expected grants with match information\n  const updatedExpectedGrants = expectedGrants.map(grant => {\n    const matchedTransaction = annotatedTransactions.find(tx => tx.grantYear === grant.year);\n    return {\n      ...grant,\n      isMatched: !!matchedTransaction,\n      matchedTxid: matchedTransaction?.txid,\n    };\n  });\n\n  // Generate summary statistics\n  const matchingSummary = {\n    totalTransactions: incomingTransactions.length,\n    matchedTransactions: matches.size,\n    unmatchedTransactions: incomingTransactions.length - matches.size,\n    expectedGrants: expectedGrants.length,\n    matchedGrants: updatedExpectedGrants.filter(grant => grant.isMatched).length,\n  };\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 234,
        "end": 256,
        "startLoc": {
          "line": 234,
          "column": 2,
          "position": 1943
        },
        "endLoc": {
          "line": 256,
          "column": 7,
          "position": 2117
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 464,
        "end": 487,
        "startLoc": {
          "line": 464,
          "column": 2,
          "position": 3428
        },
        "endLoc": {
          "line": 487,
          "column": 6,
          "position": 3607
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ") {\n        // Check if grant year is valid (exists in expected grants)\n        if (!validGrantYears.has(newGrantYear)) {\n          console.warn(`Invalid grant year ${newGrantYear} for transaction ${tx.txid}. Ignoring manual annotation.`);\n          return tx; // Keep original annotation\n        }\n        \n        // Check if grant year is already used\n        if (usedGrantYears.has(newGrantYear)) {\n          console.warn(`Grant year ${newGrantYear} already assigned to another transaction. Ignoring duplicate assignment for ${tx.txid}.`);\n          return tx; // Keep original annotation\n        }\n        \n        // Valid assignment - mark grant year as used\n        usedGrantYears.add(newGrantYear);\n      }\n      \n      return {\n        ...tx,\n        grantYear: newGrantYear,",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 287,
        "end": 306,
        "startLoc": {
          "line": 287,
          "column": 5,
          "position": 2338
        },
        "endLoc": {
          "line": 306,
          "column": 2,
          "position": 2473
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 540,
        "end": 559,
        "startLoc": {
          "line": 540,
          "column": 10,
          "position": 4000
        },
        "endLoc": {
          "line": 559,
          "column": 2,
          "position": 4136
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ",\n        isManuallyAnnotated: true,\n      };\n    }\n    \n    // For non-manually annotated transactions, check if their grant year is still available\n    if (tx.grantYear !== null && !tx.isManuallyAnnotated) {\n      if (usedGrantYears.has(tx.grantYear)) {\n        // This grant year has been manually assigned to another transaction\n        // Demote this transaction to \"Other Transaction\"\n        return {\n          ...tx,\n          grantYear: null,\n          type: 'Other Transaction' as const,\n        };\n      }\n      // Grant year is still available, mark it as used\n      usedGrantYears.add(tx.grantYear);\n    }\n    \n    return tx;\n  });\n\n  // Update expected grants based on final transaction assignments",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/on-chain/annotateTransactions.ts",
        "start": 307,
        "end": 330,
        "startLoc": {
          "line": 307,
          "column": 6,
          "position": 2500
        },
        "endLoc": {
          "line": 330,
          "column": 65,
          "position": 2632
        }
      },
      "secondFile": {
        "name": "src/lib/on-chain/annotateTransactionsOptimized.ts",
        "start": 560,
        "end": 583,
        "startLoc": {
          "line": 560,
          "column": 20,
          "position": 4177
        },
        "endLoc": {
          "line": 583,
          "column": 68,
          "position": 4310
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "{\n    milestones: [\n      { months: 0, grantPercent: 0 },\n      { months: 60, grantPercent: 50 },\n      { months: 120, grantPercent: 100 }\n    ],\n    bonuses: [\n      { months: 60, bonusPercent: 10 },\n      { months: 120, bonusPercent: 20 }\n    ]\n  })",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/calculators/examples.ts",
        "start": 115,
        "end": 125,
        "startLoc": {
          "line": 115,
          "column": 2,
          "position": 883
        },
        "endLoc": {
          "line": 125,
          "column": 2,
          "position": 989
        }
      },
      "secondFile": {
        "name": "src/lib/calculators/__tests__/VestingScheduleCalculator.test.ts",
        "start": 4,
        "end": 14,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 33
        },
        "endLoc": {
          "line": 14,
          "column": 2,
          "position": 139
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ": Record<number, BitcoinYearlyPrices> = {\n  2020: {\n    year: 2020,\n    high: 29000,\n    low: 3800,\n    average: 11500,\n    open: 7200,\n    close: 28900\n  },\n  2021: {\n    year: 2021,\n    high: 69000,\n    low: 28800,\n    average: 47500,\n    open: 28900,\n    close: 46200\n  },\n  2022: {\n    year: 2022,\n    high: 48000,\n    low: 15500,\n    average: 31000,\n    open: 46200,\n    close: 16500\n  },",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 11,
        "end": 35,
        "startLoc": {
          "line": 11,
          "column": 21,
          "position": 62
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 227
        }
      },
      "secondFile": {
        "name": "src/lib/__tests__/historical-integration.test.ts",
        "start": 14,
        "end": 39,
        "startLoc": {
          "line": 14,
          "column": 14,
          "position": 105
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 272
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\n  vestingSchedule: [\n    {\n      months: 0,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 0,\n      description: 'Immediate access'\n    },\n    {\n      months: 60,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 50,\n      description: '50% vested at 5 years'\n    },\n    {\n      months: 120,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 100,\n      description: '100% vested at 10 years'\n    }\n  ]\n};\n\nconst mockWealthBuilderScheme",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 91,
        "end": 117,
        "startLoc": {
          "line": 91,
          "column": 6,
          "position": 568
        },
        "endLoc": {
          "line": 117,
          "column": 24,
          "position": 707
        }
      },
      "secondFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 59,
        "end": 85,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 380
        },
        "endLoc": {
          "line": 85,
          "column": 30,
          "position": 519
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\n  vestingSchedule: [\n    {\n      months: 0,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 0,\n      description: 'Immediate access'\n    },\n    {\n      months: 60,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 50,\n      description: '50% vested at 5 years'\n    },\n    {\n      months: 120,\n      employeeContributionPercent: 100,\n      employerContributionPercent: 0,\n      grantPercent: 100,\n      description: '100% vested at 10 years'\n    }\n  ]\n};\n\ndescribe",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 124,
        "end": 150,
        "startLoc": {
          "line": 124,
          "column": 2,
          "position": 763
        },
        "endLoc": {
          "line": 150,
          "column": 9,
          "position": 900
        }
      },
      "secondFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 59,
        "end": 85,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 380
        },
        "endLoc": {
          "line": 85,
          "column": 6,
          "position": 517
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n        currentBitcoinPrice: 50000\n      };\n\n      const result = HistoricalCalculator.calculate(inputs);\n\n      // Verify basic structure\n      expect(result).toHaveProperty('timeline');\n      expect(result).toHaveProperty('totalBitcoinGranted');\n      expect(result).toHaveProperty('totalCostBasis');\n      expect(result).toHaveProperty('currentTotalValue');\n      expect(result).toHaveProperty('totalReturn');\n      expect(result).toHaveProperty('annualizedReturn'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/__tests__/historical-calculations.test.ts",
        "start": 157,
        "end": 169,
        "startLoc": {
          "line": 157,
          "column": 21,
          "position": 976
        },
        "endLoc": {
          "line": 169,
          "column": 19,
          "position": 1076
        }
      },
      "secondFile": {
        "name": "src/lib/__tests__/historical-integration.test.ts",
        "start": 53,
        "end": 65,
        "startLoc": {
          "line": 53,
          "column": 14,
          "position": 379
        },
        "endLoc": {
          "line": 65,
          "column": 17,
          "position": 479
        }
      }
    },
    {
      "format": "javascript",
      "lines": 50,
      "fragment": "}\n                >\n                  Year\n                </SortHeader>\n                <SortHeader\n                  field=\"date\"\n                  currentSortField={sortField}\n                  sortDirection={sortDirection}\n                  onSort={handleSort}\n                >\n                  Date\n                </SortHeader>\n                <SortHeader\n                  field=\"type\"\n                  currentSortField={sortField}\n                  sortDirection={sortDirection}\n                  onSort={handleSort}\n                >\n                  <span className=\"hidden sm:inline\">Type</span>\n                  <span className=\"sm:hidden\">T</span>\n                </SortHeader>\n                <SortHeader\n                  field=\"amountBTC\"\n                  currentSortField={sortField}\n                  sortDirection={sortDirection}\n                  onSort={handleSort}\n                >\n                  BTC\n                </SortHeader>\n                <SortHeader\n                  field=\"valueAtTimeOfTx\"\n                  currentSortField={sortField}\n                  sortDirection={sortDirection}\n                  onSort={handleSort}\n                >\n                  <span className=\"hidden sm:inline\">USD</span>\n                  <span className=\"sm:hidden\">$</span>\n                </SortHeader>\n                <th className=\"text-left py-3 px-4\">\n                  <span className=\"font-medium text-gray-700 dark:text-slate-300\">\n                    <span className=\"hidden sm:inline\">Match</span>\n                    <span className=\"sm:hidden\">M</span>\n                  </span>\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-slate-700\">\n              {sortedTransactions.map((transaction) => (\n                <TransactionRow\n                  key={transaction",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 469,
        "end": 518,
        "startLoc": {
          "line": 469,
          "column": 11,
          "position": 4188
        },
        "endLoc": {
          "line": 518,
          "column": 12,
          "position": 4510
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 461,
        "end": 500,
        "startLoc": {
          "line": 461,
          "column": 2,
          "position": 4132
        },
        "endLoc": {
          "line": 500,
          "column": 10,
          "position": 4354
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": ">\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n            </",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 325,
        "end": 331,
        "startLoc": {
          "line": 325,
          "column": 4,
          "position": 2897
        },
        "endLoc": {
          "line": 331,
          "column": 3,
          "position": 2970
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 324,
        "end": 330,
        "startLoc": {
          "line": 324,
          "column": 2,
          "position": 2883
        },
        "endLoc": {
          "line": 330,
          "column": 2,
          "position": 2956
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "} from 'react';\nimport { AnnotatedTransaction, ExpectedGrant } from '@/types/on-chain';\nimport { formatBTC, formatUSD } from '@/lib/utils';\nimport ManualAnnotationOverride from './ManualAnnotationOverride';\nimport { OnChainErrorBoundary, TimelineErrorBoundary } from './OnChainErrorBoundaries';\n\ninterface VestingTrackerResultsProps {\n  transactions: AnnotatedTransaction[];\n  expectedGrants: ExpectedGrant[];\n  isLoading: boolean;\n  error: string | null;\n  onRetry: () => void;\n  onUpdateAnnotation: (txid: string, grantYear: number | null) => void;\n  originalAnnotations?: Map<string, number | null>;\n  partialDataAvailable?: boolean;\n  onContinueWithPartialData?: () => void;\n}\n\ntype SortField = 'date' | 'grantYear' | 'type' | 'amountBTC' | 'valueAtTimeOfTx';\ntype SortDirection = 'asc' | 'desc';\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 3,
        "end": 24,
        "startLoc": {
          "line": 3,
          "column": 2,
          "position": 16
        },
        "endLoc": {
          "line": 24,
          "column": 7,
          "position": 242
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 3,
        "end": 26,
        "startLoc": {
          "line": 3,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 26,
          "column": 4,
          "position": 248
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "({\n  transactions,\n  expectedGrants,\n  isLoading,\n  error,\n  onRetry,\n  onUpdateAnnotation,\n  originalAnnotations = new Map(),\n  partialDataAvailable,\n  onContinueWithPartialData\n}: VestingTrackerResultsProps) {\n  const [sortField, setSortField] = useState<SortField>('date');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 24,
        "end": 37,
        "startLoc": {
          "line": 24,
          "column": 22,
          "position": 249
        },
        "endLoc": {
          "line": 37,
          "column": 6,
          "position": 346
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 236,
        "end": 250,
        "startLoc": {
          "line": 236,
          "column": 31,
          "position": 2039
        },
        "endLoc": {
          "line": 250,
          "column": 29,
          "position": 2137
        }
      }
    },
    {
      "format": "tsx",
      "lines": 35,
      "fragment": "[...transactions].sort((a, b) => {\n      let aValue: any;\n      let bValue: any;\n\n      switch (sortField) {\n        case 'date':\n          aValue = new Date(a.date).getTime();\n          bValue = new Date(b.date).getTime();\n          break;\n        case 'grantYear':\n          aValue = a.grantYear ?? -1;\n          bValue = b.grantYear ?? -1;\n          break;\n        case 'type':\n          aValue = a.type;\n          bValue = b.type;\n          break;\n        case 'amountBTC':\n          aValue = a.amountBTC;\n          bValue = b.amountBTC;\n          break;\n        case 'valueAtTimeOfTx':\n          aValue = a.valueAtTimeOfTx ?? 0;\n          bValue = b.valueAtTimeOfTx ?? 0;\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 61,
        "end": 95,
        "startLoc": {
          "line": 61,
          "column": 2,
          "position": 583
        },
        "endLoc": {
          "line": 95,
          "column": 7,
          "position": 904
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 254,
        "end": 287,
        "startLoc": {
          "line": 254,
          "column": 2,
          "position": 2175
        },
        "endLoc": {
          "line": 287,
          "column": 2,
          "position": 2495
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "\">\n      <div className=\"animate-pulse\">\n        <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded w-1/4 mb-4\"></div>\n        <div className=\"space-y-3\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"grid grid-cols-6 gap-4\">\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 151,
        "end": 167,
        "startLoc": {
          "line": 151,
          "column": 25,
          "position": 1398
        },
        "endLoc": {
          "line": 167,
          "column": 2,
          "position": 1582
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 319,
        "end": 335,
        "startLoc": {
          "line": 319,
          "column": 10,
          "position": 2806
        },
        "endLoc": {
          "line": 335,
          "column": 3,
          "position": 2990
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n        </svg>\n      </div>\n      <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n        No transactions found\n      </h3>\n      <p className=\"text-gray-500 dark:text-slate-400 max-w-sm mx-auto\">\n        No transactions were found for this Bitcoin address. Please verify the address is correct and has transaction history.\n      </p>\n    </div>\n  );",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 181,
        "end": 192,
        "startLoc": {
          "line": 181,
          "column": 9,
          "position": 1686
        },
        "endLoc": {
          "line": 192,
          "column": 2,
          "position": 1813
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResultsOptimized.tsx",
        "start": 342,
        "end": 353,
        "startLoc": {
          "line": 342,
          "column": 2,
          "position": 3072
        },
        "endLoc": {
          "line": 353,
          "column": 2,
          "position": 3199
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "(\n      <svg \n        className=\"w-4 h-4 text-bitcoin\" \n        fill=\"none\" \n        stroke=\"currentColor\" \n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 255,
        "end": 263,
        "startLoc": {
          "line": 255,
          "column": 2,
          "position": 2326
        },
        "endLoc": {
          "line": 263,
          "column": 15,
          "position": 2389
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 245,
        "end": 253,
        "startLoc": {
          "line": 245,
          "column": 2,
          "position": 2248
        },
        "endLoc": {
          "line": 253,
          "column": 14,
          "position": 2311
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "(event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n    \n    // Allow empty string, \"0\", or valid decimal numbers\n    if (inputValue === '' || /^\\d*\\.?\\d*$/.test(inputValue)) {\n      // Store the raw input for display\n      setRawAmountInput(inputValue);\n      \n      // Convert to numeric for validation and storage\n      const numericValue = inputValue === '' ? 0 : parseFloat(inputValue) || 0;\n      setFormData({ annualGrantBtc: numericValue });\n      \n      // Real-time validation - validate if touched or has meaningful content\n      if (touched.annualGrantBtc || (inputValue.length > 0 && inputValue !== '0')) {\n        validateFieldWithAnnouncement",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 98,
        "end": 112,
        "startLoc": {
          "line": 98,
          "column": 2,
          "position": 928
        },
        "endLoc": {
          "line": 112,
          "column": 30,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerFormOptimized.tsx",
        "start": 83,
        "end": 97,
        "startLoc": {
          "line": 83,
          "column": 2,
          "position": 833
        },
        "endLoc": {
          "line": 97,
          "column": 6,
          "position": 985
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "(event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n    const numericValue = inputValue === '' ? 0 : parseInt(inputValue);\n    \n    // Allow empty string or valid integers\n    if (inputValue === '' || (!isNaN(numericValue) && numericValue > 0)) {\n      setFormData({ totalGrants: numericValue });\n      \n      if",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 117,
        "end": 125,
        "startLoc": {
          "line": 117,
          "column": 2,
          "position": 1107
        },
        "endLoc": {
          "line": 125,
          "column": 3,
          "position": 1215
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerFormOptimized.tsx",
        "start": 107,
        "end": 115,
        "startLoc": {
          "line": 107,
          "column": 2,
          "position": 1132
        },
        "endLoc": {
          "line": 115,
          "column": 61,
          "position": 1240
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n\n  // Format number to avoid scientific notation\n  const formatNumberForDisplay = (value: number): string => {\n    if (value === 0) return '';\n    // Convert to string and handle very small numbers that might show as scientific notation\n    const str = value.toString();\n    if (str.includes('e')) {\n      // Convert scientific notation to decimal\n      return value.toFixed(8).replace(/\\.?0+$/, '');\n    }\n    return str;\n  };\n\n  // Handle form submission with comprehensive validation",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 158,
        "end": 172,
        "startLoc": {
          "line": 158,
          "column": 2,
          "position": 1448
        },
        "endLoc": {
          "line": 172,
          "column": 56,
          "position": 1559
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerFormOptimized.tsx",
        "start": 69,
        "end": 83,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 714
        },
        "endLoc": {
          "line": 83,
          "column": 6,
          "position": 825
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "\"\n                aria-expanded={showTooltips.date}\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* Tooltip */}\n            {showTooltips.date",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 369,
        "end": 379,
        "startLoc": {
          "line": 369,
          "column": 48,
          "position": 3204
        },
        "endLoc": {
          "line": 379,
          "column": 5,
          "position": 3306
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 285,
        "end": 295,
        "startLoc": {
          "line": 285,
          "column": 45,
          "position": 2460
        },
        "endLoc": {
          "line": 295,
          "column": 8,
          "position": 2562
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\" \n                className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\"\n                role=\"alert\"\n                aria-live=\"polite\"\n              >\n                <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {displayErrors.vestingStartDate",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 412,
        "end": 420,
        "startLoc": {
          "line": 412,
          "column": 11,
          "position": 3644
        },
        "endLoc": {
          "line": 420,
          "column": 17,
          "position": 3740
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 332,
        "end": 340,
        "startLoc": {
          "line": 332,
          "column": 14,
          "position": 2899
        },
        "endLoc": {
          "line": 340,
          "column": 8,
          "position": 2995
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "\"\n                aria-expanded={showTooltips.amount}\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* Tooltip */}\n            {showTooltips.amount",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 449,
        "end": 459,
        "startLoc": {
          "line": 449,
          "column": 49,
          "position": 3944
        },
        "endLoc": {
          "line": 459,
          "column": 7,
          "position": 4046
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 285,
        "end": 295,
        "startLoc": {
          "line": 285,
          "column": 45,
          "position": 2460
        },
        "endLoc": {
          "line": 295,
          "column": 8,
          "position": 2562
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "id=\"annual-grant-btc\"\n              type=\"number\"\n              step=\"0.001\"\n              min=\"0\"\n              max=\"21\"\n              value={rawAmountInput || (annualGrantBtc === 0 ? '' : formatNumberForDisplay(annualGrantBtc))}\n              onChange={handleAmountChange}\n              onFocus={() => {\n                // When focused, if there's a formatted value, put it in raw input for editing\n                if (annualGrantBtc > 0 && !rawAmountInput) {\n                  setRawAmountInput(annualGrantBtc.toString());\n                }\n              }}\n              onBlur={(",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 476,
        "end": 489,
        "startLoc": {
          "line": 476,
          "column": 15,
          "position": 4230
        },
        "endLoc": {
          "line": 489,
          "column": 2,
          "position": 4343
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerFormOptimized.tsx",
        "start": 391,
        "end": 404,
        "startLoc": {
          "line": 391,
          "column": 13,
          "position": 3294
        },
        "endLoc": {
          "line": 404,
          "column": 17,
          "position": 3407
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\" \n                className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\"\n                role=\"alert\"\n                aria-live=\"polite\"\n              >\n                <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {displayErrors.annualGrantBtc",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 504,
        "end": 512,
        "startLoc": {
          "line": 504,
          "column": 13,
          "position": 4472
        },
        "endLoc": {
          "line": 512,
          "column": 15,
          "position": 4568
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 332,
        "end": 340,
        "startLoc": {
          "line": 332,
          "column": 14,
          "position": 2899
        },
        "endLoc": {
          "line": 340,
          "column": 8,
          "position": 2995
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "\"\n                aria-expanded={showTooltips.totalGrants}\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* Tooltip */}\n            {showTooltips.totalGrants",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 541,
        "end": 551,
        "startLoc": {
          "line": 541,
          "column": 42,
          "position": 4769
        },
        "endLoc": {
          "line": 551,
          "column": 12,
          "position": 4871
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 285,
        "end": 295,
        "startLoc": {
          "line": 285,
          "column": 45,
          "position": 2460
        },
        "endLoc": {
          "line": 295,
          "column": 8,
          "position": 2562
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\" \n                className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\"\n                role=\"alert\"\n                aria-live=\"polite\"\n              >\n                <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {displayErrors.totalGrants",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 590,
        "end": 598,
        "startLoc": {
          "line": 590,
          "column": 19,
          "position": 5241
        },
        "endLoc": {
          "line": 598,
          "column": 12,
          "position": 5337
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 332,
        "end": 340,
        "startLoc": {
          "line": 332,
          "column": 14,
          "position": 2899
        },
        "endLoc": {
          "line": 340,
          "column": 8,
          "position": 2995
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "<svg \n                className=\"animate-spin h-5 w-5\" \n                xmlns=\"http://www.w3.org/2000/svg\" \n                fill=\"none\" \n                viewBox=\"0 0 24 24\"\n                aria-hidden=\"true\"\n              >\n                <circle \n                  className=\"opacity-25\" \n                  cx=\"12\" \n                  cy=\"12\" \n                  r=\"10\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"4\"\n                />\n                <path \n                  className=\"opacity-75\" \n                  fill=\"currentColor\" \n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                />\n              </svg>\n              <span>Tracking",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 645,
        "end": 666,
        "startLoc": {
          "line": 645,
          "column": 15,
          "position": 5670
        },
        "endLoc": {
          "line": 666,
          "column": 9,
          "position": 5780
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerFormOptimized.tsx",
        "start": 459,
        "end": 480,
        "startLoc": {
          "line": 459,
          "column": 15,
          "position": 3784
        },
        "endLoc": {
          "line": 480,
          "column": 10,
          "position": 3894
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "\"\n                >\n                  <svg\n                    className=\"w-4 h-4 mr-2\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/OnChainErrorBoundaries.tsx",
        "start": 154,
        "end": 167,
        "startLoc": {
          "line": 154,
          "column": 230,
          "position": 986
        },
        "endLoc": {
          "line": 167,
          "column": 77,
          "position": 1051
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/OnChainErrorBoundaries.tsx",
        "start": 47,
        "end": 60,
        "startLoc": {
          "line": 47,
          "column": 207,
          "position": 329
        },
        "endLoc": {
          "line": 60,
          "column": 108,
          "position": 394
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "\"\n                  >\n                    <svg\n                      className=\"w-4 h-4 mr-2\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      aria-hidden=\"true\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                      />\n                    </svg>\n                    Retry Price",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/on-chain/OnChainErrorBoundaries.tsx",
        "start": 238,
        "end": 254,
        "startLoc": {
          "line": 238,
          "column": 213,
          "position": 1484
        },
        "endLoc": {
          "line": 254,
          "column": 6,
          "position": 1562
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/OnChainErrorBoundaries.tsx",
        "start": 133,
        "end": 149,
        "startLoc": {
          "line": 133,
          "column": 225,
          "position": 871
        },
        "endLoc": {
          "line": 149,
          "column": 6,
          "position": 949
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "\">\n            <div className=\"card glass animate-pulse\">\n              <div className=\"h-6 bg-gray-200 dark:bg-slate-700 rounded mb-6 w-2/3\"></div>\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map(i => (\n                  <div key={i} className=\"border-2 rounded-sm p-5 border-gray-200 dark:border-slate-600\">\n                    <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded mb-2 w-1/2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-slate-700 rounded w-3/4\"></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Config Panel Skeleton */",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 124,
        "end": 137,
        "startLoc": {
          "line": 124,
          "column": 24,
          "position": 1114
        },
        "endLoc": {
          "line": 137,
          "column": 28,
          "position": 1242
        }
      },
      "secondFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 31,
        "end": 44,
        "startLoc": {
          "line": 31,
          "column": 14,
          "position": 271
        },
        "endLoc": {
          "line": 44,
          "column": 35,
          "position": 399
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "\"></div>\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map(i => (\n                  <div key={i}>\n                    <div className=\"h-3 bg-gray-200 dark:bg-slate-700 rounded mb-1 w-1/3\"></div>\n                    <div className=\"h-10 bg-gray-200 dark:bg-slate-700 rounded w-full\"></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* Right Panel Skeleton */}\n          <div className=\"lg:col-span-2\">\n            {/* Summary Cards Skeleton */",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 139,
        "end": 153,
        "startLoc": {
          "line": 139,
          "column": 53,
          "position": 1264
        },
        "endLoc": {
          "line": 153,
          "column": 29,
          "position": 1385
        }
      },
      "secondFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 46,
        "end": 60,
        "startLoc": {
          "line": 46,
          "column": 53,
          "position": 421
        },
        "endLoc": {
          "line": 60,
          "column": 36,
          "position": 542
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ">\n            {/* Summary Cards Skeleton */}\n            <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"card text-center animate-pulse\">\n                  <div className=\"h-8 bg-gray-200 dark:bg-slate-700 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-slate-700 rounded w-1/2 mx-auto\"></div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Chart Skeleton */}\n            <div className=\"card mb-6 animate-pulse",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 152,
        "end": 164,
        "startLoc": {
          "line": 152,
          "column": 2,
          "position": 1381
        },
        "endLoc": {
          "line": 164,
          "column": 24,
          "position": 1493
        }
      },
      "secondFile": {
        "name": "src/components/loading/Skeletons.tsx",
        "start": 75,
        "end": 88,
        "startLoc": {
          "line": 75,
          "column": 4,
          "position": 687
        },
        "endLoc": {
          "line": 88,
          "column": 19,
          "position": 801
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"animate-pulse\">\n          <div className=\"h-10 bg-gray-200 dark:bg-gray-800 rounded w-1/3 mb-4\"></div>\n          <div className=\"h-6 bg-gray-200 dark:bg-gray-800 rounded w-1/2",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/PageSkeletons.tsx",
        "start": 77,
        "end": 84,
        "startLoc": {
          "line": 77,
          "column": 18,
          "position": 672
        },
        "endLoc": {
          "line": 84,
          "column": 47,
          "position": 741
        }
      },
      "secondFile": {
        "name": "src/components/loading/PageSkeletons.tsx",
        "start": 37,
        "end": 44,
        "startLoc": {
          "line": 37,
          "column": 23,
          "position": 315
        },
        "endLoc": {
          "line": 44,
          "column": 47,
          "position": 384
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "switch (skeletonType) {\n      case 'compact':\n        return <CompactChartSkeleton height={height} className={className} />;\n      case 'historical':\n        return <HistoricalChartSkeleton className={className} />;\n      case 'full':\n      default:\n        return <ChartSkeleton height={height} className={className} />;\n    }\n  })();\n\n  return (\n    <ErrorBoundary",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/ChartSuspense.tsx",
        "start": 37,
        "end": 49,
        "startLoc": {
          "line": 37,
          "column": 5,
          "position": 256
        },
        "endLoc": {
          "line": 49,
          "column": 14,
          "position": 361
        }
      },
      "secondFile": {
        "name": "src/components/loading/OptimizedChartLoader.tsx",
        "start": 140,
        "end": 152,
        "startLoc": {
          "line": 140,
          "column": 5,
          "position": 1207
        },
        "endLoc": {
          "line": 152,
          "column": 4,
          "position": 1313
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "= (() => {\n    switch (skeletonType) {\n      case 'compact':\n        return <CompactChartSkeleton height={height} className={className} />;\n      case 'historical':\n        return <HistoricalChartSkeleton className={className} />;\n      case 'full':\n      default:\n        return <ChartSkeleton height={height} className={className} />;\n    }\n  })();\n  \n  return (\n    <div ref={targetRef} className=",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/loading/ChartSuspense.tsx",
        "start": 166,
        "end": 179,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 1189
        },
        "endLoc": {
          "line": 179,
          "column": 2,
          "position": 1315
        }
      },
      "secondFile": {
        "name": "src/components/loading/ChartSuspense.tsx",
        "start": 36,
        "end": 152,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 245
        },
        "endLoc": {
          "line": 152,
          "column": 2,
          "position": 1326
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/MiningOutlineIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 18,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 147
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 9,
          "position": 147
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M12.101 2.90055C12.2146 2.83225 12.3508 2.8119 12.4794 2.84399L15.8755 3.69071C16.1324 3.75477 16.2929 4.00688 16.2467 4.26372C18.6108 5.37088 20.3713 7.19467 21.0609 9.24662C21.1343 9.46479 21.0492 9.70483 20.8548 9.82812C20.6605 9.95141 20.4071 9.9261 20.2409 9.7668C19.0305 8.60617 17.4469 7.59561 15.5992 6.86542L15.5744 6.96513C15.5423 7.0938 15.4604 7.20446 15.3467 7.27276C15.2331 7.34106 15.0969 7.3614 14.9683 7.32932L14.4831 7.20836L13.5759 10.847C13.8439 10.9138 14.0069 11.1851 13.9401 11.4531L11.6418 20.6709C11.6098 20.7996 11.5279 20.9102 11.4142 20.9785C11.3005 21.0468 11.1644 21.0672 11.0357 21.0351L8.60999 20.4303C8.34205 20.3635 8.179 20.0921 8.24581 19.8242L10.5441 10.6064C10.5761 10.4777 10.658 10.367 10.7717 10.2987C10.8854 10.2304 11.0215 10.2101 11.1502 10.2422L12.0574 6.60356L11.5722 6.48259C11.3043 6.41579 11.1412 6.14443 11.208 5.87649L11.2329 5.77678C9.25866 5.55406 7.38598 5.70288 5.77237 6.15943C5.5509 6.22209 5.31527 6.12547 5.20155 5.92537C5.08782 5.72527 5.12539 5.47339 5.29255 5.31518C6.86478 3.82713 9.27548 3.04332 11.8826 3.17562C11.9196 3.06091 11.997 2.96302 12.101 2.90055Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/MiningIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 11,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 1123,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M6.41324 18.4062C5.85965 17.923 5.85965 17.077 6.41325 16.5938C7.90717 15.2899 9.86137 14.5 12 14.5C14.1387 14.5 16.093 15.2899 17.5869 16.5938C18.1405 17.077 18.1405 17.923 17.5869 18.4062C16.093 19.7101 14.1388 20.5 12.0001 20.5C9.86139 20.5 7.90717 19.7101 6.41324 18.4062Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/MinerOutlineIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 17,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 277,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ".map(({ name, component: Icon }) => (\n            <div key={name} className=\"flex flex-col items-center p-4 border rounded\">\n              <Icon size={32} className=\"text-orange-500 mb-2\" />\n              <span className=\"text-sm text-center\">{name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Special",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/IconShowcase.tsx",
        "start": 60,
        "end": 70,
        "startLoc": {
          "line": 60,
          "column": 13,
          "position": 558
        },
        "endLoc": {
          "line": 70,
          "column": 8,
          "position": 667
        }
      },
      "secondFile": {
        "name": "src/components/icons/IconShowcase.tsx",
        "start": 48,
        "end": 58,
        "startLoc": {
          "line": 48,
          "column": 12,
          "position": 428
        },
        "endLoc": {
          "line": 58,
          "column": 8,
          "position": 537
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M12 19L12 22",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/BitcoinPresentationIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 24,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 13,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M10.5212 7.95032H10.5211L10.5211 10.8771C11.7318 10.9534 14.2582 10.9438 14.2582 9.44707C14.2582 7.95033 12.1323 7.95032 10.5212 7.95032Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/BitcoinOutlineIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 19,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 138,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\" \n        d=\"M13.4253 6.43215C15.408 6.62196 16.9628 7.2096 17.1351 8.96007C17.2521 10.2362 16.6973 10.9955 15.7799 11.4234C17.261 11.7819 18.162 12.6248 17.9758 14.4945C17.7491 16.8381 15.9412 17.4468 13.3564 17.5752L13.3604 19.9947L11.8381 19.9966L11.8341 17.5771C11.6677 17.5747 11.4937 17.5772 11.3153 17.5796C11.0769 17.5829 10.8306 17.5864 10.5837 17.5787L10.5878 19.9982L9.06823 20.0001L9.06418 17.5806L6.01983 17.5222L6.27638 15.754C6.27638 15.754 7.42618 15.7785 7.40486 15.7657C7.82815 15.7635 7.95378 15.4725 7.98507 15.2814L7.9775 11.4028L7.98945 8.64238C7.94271 8.35464 7.74079 8.0094 7.11848 7.99892C7.15237 7.96945 6.00388 8.00031 6.00388 8.00031L6.00003 6.37926L9.11972 6.37537L9.11576 4.00543L10.6874 4.00347L10.6914 6.37341C10.9948 6.36526 11.2941 6.3676 11.5967 6.36995C11.6961 6.37073 11.7958 6.3715 11.8961 6.37191L11.8921 4.00197L13.4213 4.00006L13.4253 6.43215ZM10.5043 10.8912L10.5815 10.8944C11.5067 10.9335 14.2501 11.0495 14.2543 9.43656C14.2501 7.90522 11.9153 7.95463 10.8305 7.97759C10.7024 7.9803 10.5917 7.98264 10.5043 7.98197V10.8912ZM10.6339 15.642C10.5853 15.6401 10.5406 15.6383 10.5 15.6368L10.5 12.7276C10.5967 12.7285 10.7182 12.727 10.8587 12.7253C12.1408 12.7098 15.0044 12.6752 14.9908 14.219C15.0052 15.8158 11.773 15.6873 10.6339 15.642Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/BitcoinIcon.tsx",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 26,
          "column": 1270,
          "position": 162
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 26,
          "column": 510,
          "position": 162
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M20.2473 14.0515C19.1131 18.6023 14.5039 21.3811 9.94477 20.2462C5.39397 19.1085 2.61956 14.4993 3.75378 9.94853C4.88801 5.39774 9.49442 2.61886 14.0424 3.75378C18.6044 4.87478 21.3788 9.4979 20.2473 14.0515Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/BitcoinCircleOutlineIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 25,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 209,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ": React.FC<IconProps> = ({ \n  className = '', \n  size = 24, \n  color = 'currentColor' \n}) => {\n  return (\n    <svg \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path \n        d=\"M10.8636 14.3597C11.6696 14.5726 13.4306 15.0379 13.7109 13.9127C13.9976 12.762 12.2887 12.3789 11.4555 12.192C11.3626 12.1712 11.2805 12.1528 11.2134 12.1361L10.6711 14.3097C10.7264 14.3234 10.7911 14.3405 10.8636 14.3597Z",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/icons/BitcoinCircleIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 18,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 224,
          "position": 150
        }
      },
      "secondFile": {
        "name": "src/components/icons/SatoshiIcon.tsx",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 12,
          "position": 48
        },
        "endLoc": {
          "line": 24,
          "column": 175,
          "position": 150
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ">\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Educational Sidebar - 40% width */}\n      <div className=\"lg:flex-[1] lg:max-w-md\">\n        <div className=\"lg:sticky lg:top-6\">\n          <EducationalSidebar sections={feeEducation} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function FeeCalculatorToolWithErrorBoundary",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/bitcoin-tools/FeeCalculatorTool.tsx",
        "start": 632,
        "end": 648,
        "startLoc": {
          "line": 632,
          "column": 7,
          "position": 5823
        },
        "endLoc": {
          "line": 648,
          "column": 35,
          "position": 5912
        }
      },
      "secondFile": {
        "name": "src/components/bitcoin-tools/TransactionLookupTool.tsx",
        "start": 450,
        "end": 467,
        "startLoc": {
          "line": 450,
          "column": 4,
          "position": 3911
        },
        "endLoc": {
          "line": 467,
          "column": 39,
          "position": 4001
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "</div>\n        )}\n      </div>\n\n      {/* Educational Sidebar - 40% width */}\n      <div className=\"lg:flex-[1] lg:max-w-md\">\n        <div className=\"lg:sticky lg:top-6\">\n          <EducationalSidebar sections={timestampEducation} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function DocumentTimestampingToolWithErrorBoundary",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/bitcoin-tools/DocumentTimestampingTool.tsx",
        "start": 561,
        "end": 575,
        "startLoc": {
          "line": 561,
          "column": 11,
          "position": 4846
        },
        "endLoc": {
          "line": 575,
          "column": 42,
          "position": 4927
        }
      },
      "secondFile": {
        "name": "src/components/bitcoin-tools/TransactionLookupTool.tsx",
        "start": 453,
        "end": 467,
        "startLoc": {
          "line": 453,
          "column": 11,
          "position": 3920
        },
        "endLoc": {
          "line": 467,
          "column": 39,
          "position": 4001
        }
      }
    },
    {
      "format": "tsx",
      "lines": 86,
      "fragment": "// Educational content database\nexport const BITCOIN_TERMS: Record<string, EducationalContent> = {\n  TRANSACTION_ID: {\n    term: 'Transaction ID (TXID)',\n    definition: 'A unique 64-character identifier for every Bitcoin transaction.',\n    example: 'a1b2c3d4e5f6...9876543210',\n    learnMoreUrl: 'https://bitcoin.org/en/developer-guide#transactions'\n  },\n  CONFIRMATION: {\n    term: 'Confirmation',\n    definition: 'When a transaction is included in a block and added to the blockchain. More confirmations mean higher security.',\n    example: '1 confirmation = included in 1 block, 6+ confirmations = very secure',\n  },\n  MEMPOOL: {\n    term: 'Mempool',\n    definition: 'The waiting area for unconfirmed transactions. When busy, transactions wait longer and cost more.',\n    example: 'Like a queue at a restaurant - busy times mean longer waits',\n  },\n  SATOSHI: {\n    term: 'Satoshi (sat)',\n    definition: 'The smallest unit of Bitcoin. 1 Bitcoin = 100,000,000 satoshis.',\n    example: '1 BTC = 100,000,000 sats (like cents to dollars)',\n  },\n  FEE_RATE: {\n    term: 'Fee Rate',\n    definition: 'How much you pay per byte of transaction data, measured in satoshis per virtual byte (sat/vB).',\n    example: 'Higher fee rate = faster confirmation',\n  },\n  VBYTE: {\n    term: 'Virtual Byte (vB)',\n    definition: 'A unit measuring transaction size for fee calculation. Typical transactions are 150-250 vBytes.',\n    example: 'Simple transaction: ~150 vB, Complex transaction: ~400+ vB',\n  },\n  BLOCK_HEIGHT: {\n    term: 'Block Height',\n    definition: 'The sequential number of a block in the blockchain. Block 0 was the first Bitcoin block.',\n    example: 'Block height 800,000 means 800,000 blocks have been mined',\n  },\n  ADDRESS: {\n    term: 'Bitcoin Address',\n    definition: 'A string of characters that represents a destination for Bitcoin payments.',\n    example: 'Like an email address, but for receiving Bitcoin',\n  },\n  PRIVATE_KEY: {\n    term: 'Private Key',\n    definition: 'A secret number that allows spending Bitcoin from an address. Never share this!',\n    example: 'Like the password to your bank account - keep it private',\n  },\n  HASH: {\n    term: 'Hash',\n    definition: 'A unique digital fingerprint of data. Even tiny changes create completely different hashes.',\n    example: 'Like a digital fingerprint that proves data hasn\\'t been tampered with',\n  },\n  TIMESTAMP: {\n    term: 'Timestamp',\n    definition: 'Proof that data existed at a specific time, recorded immutably on the Bitcoin blockchain.',\n    example: 'Like a notary stamp that can never be forged or changed',\n  },\n  CONGESTION: {\n    term: 'Network Congestion',\n    definition: 'When many people are sending transactions at once, causing delays and higher fees.',\n    example: 'Like traffic during rush hour - more cars mean slower movement',\n  },\n  BLOCKCHAIN: {\n    term: 'Blockchain',\n    definition: 'A chain of blocks containing transaction records, maintained by a network of computers worldwide.',\n    example: 'Like a public ledger that everyone can see but no one can cheat',\n  },\n  MINING: {\n    term: 'Mining',\n    definition: 'The process of creating new blocks and securing the Bitcoin network by solving complex puzzles.',\n    example: 'Miners compete to solve puzzles and win the right to add the next block',\n  },\n  NODE: {\n    term: 'Node',\n    definition: 'A computer that maintains a copy of the Bitcoin blockchain and helps validate transactions.',\n    example: 'Like having your own copy of all bank records to verify transactions',\n  },\n  WALLET: {\n    term: 'Wallet',\n    definition: 'Software that manages your Bitcoin addresses and private keys, allowing you to send and receive Bitcoin.',\n    example: 'Like a digital wallet that holds your Bitcoin keys, not the Bitcoin itself',\n  }\n};\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/bitcoin-tools/BitcoinTooltips.tsx",
        "start": 13,
        "end": 98,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 71
        },
        "endLoc": {
          "line": 98,
          "column": 10,
          "position": 597
        }
      },
      "secondFile": {
        "name": "src/components/bitcoin-tools/Tooltip.tsx",
        "start": 226,
        "end": 311,
        "startLoc": {
          "line": 226,
          "column": 1,
          "position": 1965
        },
        "endLoc": {
          "line": 311,
          "column": 50,
          "position": 2491
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ".copyToClipboard(text);\n    if (success) {\n      setCopiedItem(item);\n      // Clear any existing timeout\n      if (copyTimeoutRef.current) {\n        clearTimeout(copyTimeoutRef.current);\n      }\n      // Set new timeout with cleanup reference\n      copyTimeoutRef.current = setTimeout(() => setCopiedItem(null), 2000);\n    }\n  };\n\n  const _handlePageChange",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/bitcoin-tools/AddressExplorerTool.tsx",
        "start": 74,
        "end": 86,
        "startLoc": {
          "line": 74,
          "column": 15,
          "position": 716
        },
        "endLoc": {
          "line": 86,
          "column": 18,
          "position": 803
        }
      },
      "secondFile": {
        "name": "src/components/bitcoin-tools/TransactionLookupTool.tsx",
        "start": 82,
        "end": 94,
        "startLoc": {
          "line": 82,
          "column": 19,
          "position": 721
        },
        "endLoc": {
          "line": 94,
          "column": 14,
          "position": 808
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ">\n          </div>\n          </div>\n        )}\n      </div>\n\n      {/* Educational Sidebar - 40% width */}\n      <div className=\"lg:flex-[1] lg:max-w-md\">\n        <div className=\"lg:sticky lg:top-6\">\n          <EducationalSidebar sections={addressEducation} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function AddressExplorerToolWithErrorBoundary",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/bitcoin-tools/AddressExplorerTool.tsx",
        "start": 413,
        "end": 429,
        "startLoc": {
          "line": 413,
          "column": 3,
          "position": 4062
        },
        "endLoc": {
          "line": 429,
          "column": 37,
          "position": 4151
        }
      },
      "secondFile": {
        "name": "src/components/bitcoin-tools/TransactionLookupTool.tsx",
        "start": 450,
        "end": 467,
        "startLoc": {
          "line": 450,
          "column": 4,
          "position": 3911
        },
        "endLoc": {
          "line": 467,
          "column": 39,
          "position": 4001
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "}, (_, i) => ({\n      year: i,\n      btcBalance: 0.1 + i * 0.05,\n      usdValue: 50000 + i * 10000,\n      bitcoinPrice: 50000 + i * 5000,\n      vestedAmount: i >= 10 ? 100 : i >= 5 ? 50 : 0\n    }));\n\n  const defaultProps = {\n    initialGrant",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/__tests__/VirtualizedAnnualBreakdown.performance.test.tsx",
        "start": 8,
        "end": 17,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 92
        },
        "endLoc": {
          "line": 17,
          "column": 13,
          "position": 206
        }
      },
      "secondFile": {
        "name": "src/components/__tests__/VirtualizedAnnualBreakdown.test.tsx",
        "start": 7,
        "end": 16,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 70
        },
        "endLoc": {
          "line": 16,
          "column": 11,
          "position": 184
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ", () => {\n      render(\n        <Tooltip content=\"This is tooltip content\">\n          <span>Hover me</span>\n        </Tooltip>\n      );\n\n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      expect(screen.getByText('This is tooltip content')).toBeInTheDocument();\n\n      fireEvent",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/__tests__/ProgressiveDisclosure.test.tsx",
        "start": 21,
        "end": 32,
        "startLoc": {
          "line": 21,
          "column": 35,
          "position": 178
        },
        "endLoc": {
          "line": 32,
          "column": 10,
          "position": 265
        }
      },
      "secondFile": {
        "name": "src/components/__tests__/ProgressiveDisclosure.test.tsx",
        "start": 8,
        "end": 19,
        "startLoc": {
          "line": 8,
          "column": 33,
          "position": 82
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 169
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ";\n    const liveRegion = document.createElement('div');\n    liveRegion.setAttribute('aria-live', 'polite');\n    liveRegion.setAttribute('aria-atomic', 'true');\n    liveRegion.className = 'sr-only';\n    liveRegion.textContent = announcement;\n\n    document.body.appendChild(liveRegion);\n    setTimeout(() => document.body.removeChild(liveRegion), 1000);\n  };\n\n  const",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/page.tsx",
        "start": 64,
        "end": 75,
        "startLoc": {
          "line": 64,
          "column": 28,
          "position": 425
        },
        "endLoc": {
          "line": 75,
          "column": 6,
          "position": 526
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerForm.tsx",
        "start": 218,
        "end": 65,
        "startLoc": {
          "line": 218,
          "column": 67,
          "position": 1914
        },
        "endLoc": {
          "line": 65,
          "column": 48,
          "position": 577
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                          </svg>\n                          Try Again\n                        </button>\n\n                        {",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/track/page.tsx",
        "start": 730,
        "end": 737,
        "startLoc": {
          "line": 730,
          "column": 25,
          "position": 5894
        },
        "endLoc": {
          "line": 737,
          "column": 2,
          "position": 5978
        }
      },
      "secondFile": {
        "name": "src/components/on-chain/VestingTrackerResults.tsx",
        "start": 218,
        "end": 224,
        "startLoc": {
          "line": 218,
          "column": 7,
          "position": 2003
        },
        "endLoc": {
          "line": 224,
          "column": 3,
          "position": 2086
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "</h1>\n        \n        <div className=\"prose prose-lg dark:prose-invert max-w-none\">\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n            <strong>Effective Date:</strong> January 1, 2025\n          </p>\n\n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">1. Information",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/privacy/page.tsx",
        "start": 13,
        "end": 21,
        "startLoc": {
          "line": 13,
          "column": 7,
          "position": 92
        },
        "endLoc": {
          "line": 21,
          "column": 12,
          "position": 168
        }
      },
      "secondFile": {
        "name": "src/app/terms/page.tsx",
        "start": 13,
        "end": 21,
        "startLoc": {
          "line": 13,
          "column": 8,
          "position": 94
        },
        "endLoc": {
          "line": 21,
          "column": 12,
          "position": 170
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ".\n            </p>\n            <div className=\"mt-6\">\n              <Link href=\"/\" className=\"text-bitcoin hover:text-bitcoin-600 font-medium\">\n                ← Return to Home\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/privacy/page.tsx",
        "start": 143,
        "end": 157,
        "startLoc": {
          "line": 143,
          "column": 6,
          "position": 2155
        },
        "endLoc": {
          "line": 157,
          "column": 2,
          "position": 2241
        }
      },
      "secondFile": {
        "name": "src/app/terms/page.tsx",
        "start": 114,
        "end": 128,
        "startLoc": {
          "line": 114,
          "column": 8,
          "position": 1637
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1723
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "\">\n            <Navigation />\n            \n            {/* Hero Section */}\n            <section className=\"relative min-h-[150px] py-8 overflow-hidden bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-bitcoin/10 to-blue-500/10\" aria-hidden=\"true\"></div>\n\n              <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-3xl sm:text-4xl md:text-5xl font-bold leading-tight\">\n                    <span className=\"bg-gradient-to-r from-slate-700 via-slate-900 to-slate-700 dark:from-slate-200 dark:via-white dark:to-slate-300 bg-clip-text text-transparent\">Join",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 12,
        "end": 22,
        "startLoc": {
          "line": 12,
          "column": 13,
          "position": 92
        },
        "endLoc": {
          "line": 22,
          "column": 5,
          "position": 183
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 176,
        "end": 185,
        "startLoc": {
          "line": 176,
          "column": 44,
          "position": 1692
        },
        "endLoc": {
          "line": 185,
          "column": 6,
          "position": 1781
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                            </svg>\n                                        </div>\n                                    </div>\n                                </div>\n                            </a>\n\n                            {/* Kraken - Right */",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 173,
        "end": 181,
        "startLoc": {
          "line": 173,
          "column": 83,
          "position": 1721
        },
        "endLoc": {
          "line": 181,
          "column": 21,
          "position": 1800
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 106,
        "end": 114,
        "startLoc": {
          "line": 106,
          "column": 83,
          "position": 1124
        },
        "endLoc": {
          "line": 114,
          "column": 32,
          "position": 1203
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "<svg className=\"w-4 h-4 ml-1 transform group-hover:translate-x-1 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                            </svg>\n                                        </div>\n                                    </div>\n                                </div>\n                            </a>\n                        </",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 229,
        "end": 236,
        "startLoc": {
          "line": 229,
          "column": 45,
          "position": 2236
        },
        "endLoc": {
          "line": 236,
          "column": 3,
          "position": 2320
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 106,
        "end": 114,
        "startLoc": {
          "line": 106,
          "column": 45,
          "position": 1117
        },
        "endLoc": {
          "line": 114,
          "column": 2,
          "position": 1202
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "<svg className=\"w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 349,
        "end": 355,
        "startLoc": {
          "line": 349,
          "column": 53,
          "position": 3412
        },
        "endLoc": {
          "line": 355,
          "column": 4,
          "position": 3492
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 173,
        "end": 112,
        "startLoc": {
          "line": 173,
          "column": 45,
          "position": 1714
        },
        "endLoc": {
          "line": 112,
          "column": 2,
          "position": 1197
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </a>\n\n                                {",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 390,
        "end": 399,
        "startLoc": {
          "line": 390,
          "column": 83,
          "position": 3747
        },
        "endLoc": {
          "line": 399,
          "column": 2,
          "position": 3830
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 106,
        "end": 357,
        "startLoc": {
          "line": 106,
          "column": 83,
          "position": 1124
        },
        "endLoc": {
          "line": 357,
          "column": 3,
          "position": 3501
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "\">\n                                                    Learn More\n                                                    <svg className=\"w-3 h-3 ml-1 transform group-hover:translate-x-1 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                                    </svg>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </a>\n                            </div>\n                        </",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/learn/page.tsx",
        "start": 426,
        "end": 437,
        "startLoc": {
          "line": 426,
          "column": 166,
          "position": 4034
        },
        "endLoc": {
          "line": 437,
          "column": 3,
          "position": 4137
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 388,
        "end": 359,
        "startLoc": {
          "line": 388,
          "column": 170,
          "position": 3731
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 3507
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "return (\n    <div className=\"min-h-screen transition-colors duration-300\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative min-h-[150px] py-8 overflow-hidden bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-bitcoin/10 to-blue-500/10\" aria-hidden=\"true\"></div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl sm:text-4xl md:text-5xl font-bold leading-tight\">\n              <span className=\"bg-gradient-to-r from-slate-700 via-slate-900 to-slate-700 dark:from-slate-200 dark:via-white dark:to-slate-300 bg-clip-text text-transparent\">Learn",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/historical/page.tsx",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 3,
          "position": 980
        },
        "endLoc": {
          "line": 141,
          "column": 6,
          "position": 1083
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 175,
        "end": 185,
        "startLoc": {
          "line": 175,
          "column": 3,
          "position": 1680
        },
        "endLoc": {
          "line": 185,
          "column": 6,
          "position": 1781
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "<div className={`card ${\n              selectedScheme?.id === 'accelerator'\n                ? 'border-2 border-bitcoin/20 hover:border-bitcoin/30 bg-gradient-to-r from-bitcoin/5 to-orange-100/50 dark:from-bitcoin/10 dark:to-slate-800'\n                : selectedScheme?.id === 'steady-builder'\n                ? 'border-2 border-green-500/20 hover:border-green-500/30 bg-gradient-to-r from-green-50 to-green-100/50 dark:from-green-900/20 dark:to-slate-800'\n                : selectedScheme?.id === 'slow-burn'\n                ? 'border-2 border-blue-500/20 hover:border-blue-500/30 bg-gradient-to-r from-blue-50 to-blue-100/50 dark:from-blue-900/20 dark:to-slate-800'\n                : ''\n            }`}>\n              <div className=\"flex items-center mb-6\">\n                <SatoshiIcon className=\"w-6 h-6 text-bitcoin mr-3\" />\n                <h2 className=\"text-xl font-bold text-gray-900 dark:text-slate-100\">\n                  Choose a Plan\n                </h2>\n              </div>\n\n              {/* Enhanced Scheme Tabs Selector */}\n              <SchemeTabSelector \n                selectedScheme={selectedScheme}\n                onSchemeSelect={handleSchemeSelect}\n                currentPath=\"historical",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/historical/page.tsx",
        "start": 158,
        "end": 178,
        "startLoc": {
          "line": 158,
          "column": 13,
          "position": 1207
        },
        "endLoc": {
          "line": 178,
          "column": 11,
          "position": 1338
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 200,
        "end": 220,
        "startLoc": {
          "line": 200,
          "column": 13,
          "position": 1905
        },
        "endLoc": {
          "line": 220,
          "column": 11,
          "position": 2036
        }
      }
    },
    {
      "format": "tsx",
      "lines": 29,
      "fragment": ";\n\nexport const metadata: Metadata = {\n  title: 'Bitcoin Tools | Simple Blockchain Tools for Everyone',\n  description: 'User-friendly Bitcoin blockchain tools: transaction lookup, fee calculator, network status, address explorer, and document timestamping. No technical knowledge required.',\n  keywords: ['bitcoin', 'blockchain', 'transaction', 'fees', 'mempool', 'tools', 'cryptocurrency'],\n  robots: 'index, follow',\n  openGraph: {\n    title: 'Bitcoin Tools - Simple Blockchain Tools for Everyone',\n    description: 'Easy-to-use Bitcoin blockchain tools for checking transactions, calculating fees, and exploring the network.',\n    type: 'website',\n    locale: 'en_US',\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Bitcoin Tools - Simple Blockchain Tools for Everyone',\n    description: 'Easy-to-use Bitcoin blockchain tools for checking transactions, calculating fees, and exploring the network.',\n  },\n};\n\ninterface BitcoinToolsPageProps {\n  searchParams?: {\n    tool?: string;\n    txid?: string;\n    address?: string;\n  };\n}\n\nexport default function EnhancedBitcoinToolsPage",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/bitcoin-tools/enhanced-page.tsx",
        "start": 9,
        "end": 37,
        "startLoc": {
          "line": 9,
          "column": 24,
          "position": 123
        },
        "endLoc": {
          "line": 37,
          "column": 25,
          "position": 310
        }
      },
      "secondFile": {
        "name": "src/app/bitcoin-tools/page.tsx",
        "start": 31,
        "end": 59,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 304
        },
        "endLoc": {
          "line": 59,
          "column": 17,
          "position": 491
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ">({});\n  const [loading, setLoading] = useState<Record<string, boolean>>({});\n\n  const testEndpoint = async (name: string, url: string) => {\n    setLoading((prev: Record<string, boolean>) => ({ ...prev, [name]: true }));\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setResults((prev: TestResults",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api-test/page.tsx",
        "start": 16,
        "end": 24,
        "startLoc": {
          "line": 16,
          "column": 12,
          "position": 113
        },
        "endLoc": {
          "line": 24,
          "column": 12,
          "position": 254
        }
      },
      "secondFile": {
        "name": "src/components/dev/APITester.tsx",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 15,
          "position": 107
        },
        "endLoc": {
          "line": 27,
          "column": 15,
          "position": 248
        }
      }
    },
    {
      "format": "tsx",
      "lines": 31,
      "fragment": ") => ({ \n        ...prev, \n        [name]: { \n          status: 'ERROR', \n          error: error instanceof Error ? error.message : 'Unknown error' \n        } \n      }));\n    } finally {\n      setLoading((prev: Record<string, boolean>) => ({ ...prev, [name]: false }));\n    }\n  };\n\n  const tests = [\n    {\n      name: 'Health Check',\n      url: '/api/health',\n      description: 'Basic API health check'\n    },\n    {\n      name: 'Mempool API Test',\n      url: '/api/mempool/address/bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh/txs',\n      description: 'Test mempool.space proxy with a known address'\n    },\n    {\n      name: 'CoinGecko API Test',\n      url: '/api/coingecko?from=1609459200&to=1609545600&vs_currency=usd',\n      description: 'Test CoinGecko proxy with a date range (Jan 1-2, 2021)'\n    }\n  ];\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/api-test/page.tsx",
        "start": 34,
        "end": 64,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 342
        },
        "endLoc": {
          "line": 64,
          "column": 7,
          "position": 551
        }
      },
      "secondFile": {
        "name": "src/components/dev/APITester.tsx",
        "start": 36,
        "end": 66,
        "startLoc": {
          "line": 36,
          "column": 15,
          "position": 327
        },
        "endLoc": {
          "line": 66,
          "column": 3,
          "position": 536
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "= z.object({\n  prevout: z.object({\n    scriptpubkey_address: z.string(),\n    value: z.number().int().nonnegative(),\n  }),\n  is_coinbase: z.boolean().optional(),\n  sequence: z.number().int().optional(),\n});\n\nexport const TransactionOutputSchema",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/api.ts",
        "start": 36,
        "end": 45,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 225
        },
        "endLoc": {
          "line": 45,
          "column": 24,
          "position": 321
        }
      },
      "secondFile": {
        "name": "src/lib/validation/schemas.ts",
        "start": 318,
        "end": 327,
        "startLoc": {
          "line": 318,
          "column": 2,
          "position": 2704
        },
        "endLoc": {
          "line": 327,
          "column": 31,
          "position": 2800
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "= z.object({\n  confirmed: z.boolean(),\n  block_height: z.number().int().positive().optional(),\n  block_time: z.number().int().positive().optional(),\n  block_hash: z.string().optional(),\n});\n\n// Full Transaction",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/api.ts",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 393
        },
        "endLoc": {
          "line": 59,
          "column": 20,
          "position": 478
        }
      },
      "secondFile": {
        "name": "src/lib/validation/schemas.ts",
        "start": 334,
        "end": 341,
        "startLoc": {
          "line": 334,
          "column": 2,
          "position": 2872
        },
        "endLoc": {
          "line": 341,
          "column": 37,
          "position": 2957
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ": z.object({\n    funded_txo_count: z.number().int().nonnegative(),\n    funded_txo_sum: z.number().int().nonnegative(),\n    spent_txo_count: z.number().int().nonnegative(),\n    spent_txo_sum: z.number().int().nonnegative(),\n    tx_count: z.number().int().nonnegative(),\n  }),\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/api.ts",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 14,
          "position": 791
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 899
        }
      },
      "secondFile": {
        "name": "src/types/api.ts",
        "start": 77,
        "end": 84,
        "startLoc": {
          "line": 77,
          "column": 12,
          "position": 681
        },
        "endLoc": {
          "line": 84,
          "column": 14,
          "position": 790
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "export const FeeEstimatesSchema = z.object({\n  '1': z.number().int().positive(), // Next block\n  '2': z.number().int().positive(), // ~10 minutes\n  '3': z.number().int().positive(), // ~20 minutes\n  '4': z.number().int().positive(), // ~30 minutes\n  '6': z.number().int().positive(), // ~60 minutes\n  '10': z.number().int().positive(), // ~100 minutes\n  '20': z.number().int().positive(), // ~200 minutes\n  '144': z.number().int().positive(), // ~1 day\n  '504': z.number().int().positive(), // ~1 week\n  '1008': z.number().int().positive(), // ~2 weeks\n});\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/api.ts",
        "start": 96,
        "end": 109,
        "startLoc": {
          "line": 96,
          "column": 1,
          "position": 925
        },
        "endLoc": {
          "line": 109,
          "column": 7,
          "position": 1154
        }
      },
      "secondFile": {
        "name": "src/lib/validation/schemas.ts",
        "start": 355,
        "end": 368,
        "startLoc": {
          "line": 355,
          "column": 1,
          "position": 3105
        },
        "endLoc": {
          "line": 368,
          "column": 81,
          "position": 3334
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "z.object({\n    success: z.literal(true),\n    data: dataSchema,\n    timestamp: z.number().int().positive().optional(),\n    source: z.string().optional(),\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/api.ts",
        "start": 148,
        "end": 153,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 1561
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1627
        }
      },
      "secondFile": {
        "name": "src/types/api.ts",
        "start": 118,
        "end": 123,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 1219
        },
        "endLoc": {
          "line": 123,
          "column": 2,
          "position": 1285
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "formErrors: {},\n      rawTransactions: [],\n      annotatedTransactions: [],\n      expectedGrants: [],\n      historicalPrices: {},\n      manualAnnotations: new Map(),\n      isLoading: false,\n      error: null,\n      currentStep: 'idle',\n      partialDataAvailable: false,\n      lastError: null,\n      retryCount: 0,\n      performanceMetrics: null,\n      lastProcessingTimeMs: 0,\n      pricingProgress",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/onChainStore.ts",
        "start": 483,
        "end": 497,
        "startLoc": {
          "line": 483,
          "column": 7,
          "position": 3810
        },
        "endLoc": {
          "line": 497,
          "column": 16,
          "position": 3917
        }
      },
      "secondFile": {
        "name": "src/stores/onChainStore.ts",
        "start": 96,
        "end": 110,
        "startLoc": {
          "line": 96,
          "column": 3,
          "position": 823
        },
        "endLoc": {
          "line": 110,
          "column": 31,
          "position": 930
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ");\n    },\n  \n    updateSchemeCustomization: (schemeId, customization) => {\n      const { debouncedCalculate } = getDebouncedFunctions();\n      \n      set((state) => ({\n        schemeCustomizations: {\n          ...state.schemeCustomizations,\n          [schemeId]: {\n            ...state.schemeCustomizations[schemeId],\n            ...customization\n          }\n        }\n      }));\n      \n      // Use debounced calculation",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/calculatorStore.ts",
        "start": 331,
        "end": 347,
        "startLoc": {
          "line": 331,
          "column": 2,
          "position": 2949
        },
        "endLoc": {
          "line": 347,
          "column": 29,
          "position": 3053
        }
      },
      "secondFile": {
        "name": "src/stores/historicalCalculatorStore.ts",
        "start": 129,
        "end": 145,
        "startLoc": {
          "line": 129,
          "column": 2,
          "position": 1082
        },
        "endLoc": {
          "line": 145,
          "column": 58,
          "position": 1186
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => {\n      const { debouncedCalculate } = getDebouncedFunctions();\n      \n      set((state) => {\n        const currentCustomization = state.schemeCustomizations[schemeId] || {};\n        const currentEvents = currentCustomization.customVestingEvents || [];\n        \n        return {\n          schemeCustomizations: {\n            ...state.schemeCustomizations,\n            [schemeId]: {\n              ...currentCustomization,\n              customVestingEvents: currentEvents",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/calculatorStore.ts",
        "start": 372,
        "end": 384,
        "startLoc": {
          "line": 372,
          "column": 8,
          "position": 3231
        },
        "endLoc": {
          "line": 384,
          "column": 14,
          "position": 3340
        }
      },
      "secondFile": {
        "name": "src/stores/calculatorStore.ts",
        "start": 351,
        "end": 363,
        "startLoc": {
          "line": 351,
          "column": 6,
          "position": 3076
        },
        "endLoc": {
          "line": 363,
          "column": 2,
          "position": 3185
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => {\n      const { debouncedCalculate } = getDebouncedFunctions();\n      \n      set((state) => {\n        const currentCustomization = state.schemeCustomizations[schemeId] || {};\n        const currentEvents = currentCustomization.customVestingEvents || [];\n        \n        return {\n          schemeCustomizations: {\n            ...state.schemeCustomizations,\n            [schemeId]: {\n              ...currentCustomization,\n              customVestingEvents: currentEvents.map",
      "tokens": 0,
      "firstFile": {
        "name": "src/stores/calculatorStore.ts",
        "start": 393,
        "end": 405,
        "startLoc": {
          "line": 393,
          "column": 8,
          "position": 3398
        },
        "endLoc": {
          "line": 405,
          "column": 4,
          "position": 3509
        }
      },
      "secondFile": {
        "name": "src/stores/calculatorStore.ts",
        "start": 351,
        "end": 384,
        "startLoc": {
          "line": 351,
          "column": 6,
          "position": 3076
        },
        "endLoc": {
          "line": 384,
          "column": 7,
          "position": 3342
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ",\n    vestingSchedule: [\n      {\n        months: 0,\n        employeeContributionPercent: 100,\n        grantPercent: 0,\n        description: 'Immediate access to contributions',\n      },\n      {\n        months: 60,\n        employeeContributionPercent: 100,\n        grantPercent: 50,\n        description: '50% unlocked at 5 years',\n      },\n      {\n        months: 120,\n        employeeContributionPercent: 100,\n        grantPercent: 100,\n        description: '100% unlocked at 10 years',\n      },\n    ],\n  },\n]",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/vesting-schemes.ts",
        "start": 78,
        "end": 100,
        "startLoc": {
          "line": 78,
          "column": 6,
          "position": 484
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 605
        }
      },
      "secondFile": {
        "name": "src/lib/vesting-schemes.ts",
        "start": 45,
        "end": 67,
        "startLoc": {
          "line": 45,
          "column": 9,
          "position": 285
        },
        "endLoc": {
          "line": 67,
          "column": 2,
          "position": 407
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": ",\n    tagline: 'Impact',\n    bestFor: 'Bold companies ready to lead',\n    riskLevel: 'High',\n    vestingSchedule: [\n      {\n        months: 0,\n        employeeContributionPercent: 100,\n        grantPercent: 0,\n        description: 'No award unlocked yet',\n      },\n      {\n        months: 60,\n        employeeContributionPercent: 100,\n        grantPercent: 50,\n        description: '50% unlocked at 5 years',\n      },\n      {\n        months: 120,\n        employeeContributionPercent: 100,\n        grantPercent: 100,\n        description: '100% unlocked at 10 years',\n      },\n    ],\n  },\n  {\n    id: 'steady-builder',\n    name: 'Stacker',\n    description: 'Smart starting award plus yearly additions for five years.'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/historical-vesting-schemes.ts",
        "start": 12,
        "end": 40,
        "startLoc": {
          "line": 12,
          "column": 5,
          "position": 78
        },
        "endLoc": {
          "line": 40,
          "column": 61,
          "position": 241
        }
      },
      "secondFile": {
        "name": "src/lib/vesting-schemes.ts",
        "start": 10,
        "end": 38,
        "startLoc": {
          "line": 10,
          "column": 9,
          "position": 72
        },
        "endLoc": {
          "line": 38,
          "column": 23,
          "position": 235
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": ",\n    tagline: 'Balance',\n    bestFor: 'Growing businesses',\n    riskLevel: 'Medium',\n    vestingSchedule: [\n      {\n        months: 0,\n        employeeContributionPercent: 100,\n        grantPercent: 0,\n        description: 'Immediate access to contributions',\n      },\n      {\n        months: 60,\n        employeeContributionPercent: 100,\n        grantPercent: 50,\n        description: '50% unlocked at 5 years',\n      },\n      {\n        months: 120,\n        employeeContributionPercent: 100,\n        grantPercent: 100,\n        description: '100% unlocked at 10 years',\n      },\n    ],\n  },\n  {\n    id: 'slow-burn',\n    name: 'Builder',\n    description: 'Yearly awards only - keeps costs low and predictable.'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/historical-vesting-schemes.ts",
        "start": 45,
        "end": 73,
        "startLoc": {
          "line": 45,
          "column": 5,
          "position": 283
        },
        "endLoc": {
          "line": 73,
          "column": 56,
          "position": 446
        }
      },
      "secondFile": {
        "name": "src/lib/vesting-schemes.ts",
        "start": 42,
        "end": 70,
        "startLoc": {
          "line": 42,
          "column": 20,
          "position": 264
        },
        "endLoc": {
          "line": 70,
          "column": 25,
          "position": 427
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n    tagline: 'Low Cost',\n    bestFor: 'Budget-conscious companies',\n    riskLevel: 'Low',\n    vestingSchedule: [\n      {\n        months: 0,\n        employeeContributionPercent: 100,\n        grantPercent: 0,\n        description: 'Immediate access to contributions',\n      },\n      {\n        months: 60,\n        employeeContributionPercent: 100,\n        grantPercent: 50,\n        description: '50% unlocked at 5 years',\n      },\n      {\n        months: 120,\n        employeeContributionPercent: 100,\n        grantPercent: 100,\n        description: '100% unlocked at 10 years',\n      },\n    ],\n  },\n];",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/historical-vesting-schemes.ts",
        "start": 78,
        "end": 103,
        "startLoc": {
          "line": 78,
          "column": 6,
          "position": 488
        },
        "endLoc": {
          "line": 103,
          "column": 2,
          "position": 631
        }
      },
      "secondFile": {
        "name": "src/lib/vesting-schemes.ts",
        "start": 75,
        "end": 100,
        "startLoc": {
          "line": 75,
          "column": 18,
          "position": 463
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 606
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "<T, U = unknown>(\n    url: string,\n    body: U,\n    responseSchema: z.ZodSchema<T>,\n    options?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    return this.request(url, responseSchema, {\n      ...options,\n      method: 'PUT'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/api-client.ts",
        "start": 184,
        "end": 192,
        "startLoc": {
          "line": 184,
          "column": 4,
          "position": 1301
        },
        "endLoc": {
          "line": 192,
          "column": 6,
          "position": 1383
        }
      },
      "secondFile": {
        "name": "src/lib/api-client.ts",
        "start": 168,
        "end": 176,
        "startLoc": {
          "line": 168,
          "column": 5,
          "position": 1188
        },
        "endLoc": {
          "line": 176,
          "column": 7,
          "position": 1270
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "}\n\nfunction formatBTC(amount: number): string {\n  return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VirtualizedAnnualBreakdown.tsx",
        "start": 21,
        "end": 31,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 140
        },
        "endLoc": {
          "line": 31,
          "column": 22,
          "position": 220
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 38,
        "end": 48,
        "startLoc": {
          "line": 38,
          "column": 1,
          "position": 355
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 435
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "\">\n        <span className={`inline-flex px-1 sm:px-3 py-1 rounded-full text-xs font-bold ${\n          vestingPercent === 100 ? 'bg-gradient-to-r from-green-400 to-emerald-500 text-white shadow-md' :\n          vestingPercent === 50 ? 'bg-gradient-to-r from-amber-400 to-orange-500 text-white shadow-md' :\n          'bg-gradient-to-r from-gray-400 to-gray-500 text-white'\n        }`}>\n          <span className=\"hidden sm:inline\">{vestingPercent}% Unlocked</span>\n          <span className=\"sm:hidden\">{vestingPercent}%</span>\n        </span>\n      </div>\n      \n      {/* Desktop-only columns - Adjusted spacing */}\n      <div className=\"flex-none w-24 text-sm text-gray-700 dark:text-gray-300 hidden lg:block",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VirtualizedAnnualBreakdown.tsx",
        "start": 89,
        "end": 101,
        "startLoc": {
          "line": 89,
          "column": 39,
          "position": 760
        },
        "endLoc": {
          "line": 101,
          "column": 72,
          "position": 862
        }
      },
      "secondFile": {
        "name": "src/components/VirtualizedAnnualBreakdownOptimized.tsx",
        "start": 115,
        "end": 127,
        "startLoc": {
          "line": 115,
          "column": 39,
          "position": 1017
        },
        "endLoc": {
          "line": 127,
          "column": 72,
          "position": 1119
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ";\n}\n\nfunction formatBTC(amount: number): string {\n  return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nfunction",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 24,
        "end": 40,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 158
        },
        "endLoc": {
          "line": 40,
          "column": 9,
          "position": 266
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 37,
        "end": 36,
        "startLoc": {
          "line": 37,
          "column": 7,
          "position": 353
        },
        "endLoc": {
          "line": 36,
          "column": 10,
          "position": 246
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "const sortedEvents = useMemo(() => {\n    if (!customVestingEvents?.length) return null;\n    return [...customVestingEvents].sort((a, b) => a.timePeriod - b.timePeriod);\n  }, [customVestingEvents]);\n  \n  // Helper function to get vesting percentage for a given month (optimized)",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 314,
        "end": 319,
        "startLoc": {
          "line": 314,
          "column": 3,
          "position": 2712
        },
        "endLoc": {
          "line": 319,
          "column": 75,
          "position": 2787
        }
      },
      "secondFile": {
        "name": "src/components/charts/vesting/VestingChartData.tsx",
        "start": 20,
        "end": 25,
        "startLoc": {
          "line": 20,
          "column": 3,
          "position": 155
        },
        "endLoc": {
          "line": 25,
          "column": 50,
          "position": 229
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "const getVestingPercentage = useCallback((months: number): number => {\n    if (!sortedEvents) {\n      // Fallback to default vesting schedule\n      return months >= 120 ? 100 : months >= 60 ? 50 : 0;\n    }\n    \n    // Find the highest vesting percentage that has been reached\n    for (let i = sortedEvents.length - 1; i >= 0; i--) {\n      if (months >= sortedEvents[i].timePeriod) {\n        return sortedEvents[i].percentageVested;\n      }\n    }\n    return 0;\n  }, [sortedEvents]);\n\n  // Get vesting milestone years from custom events",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 320,
        "end": 335,
        "startLoc": {
          "line": 320,
          "column": 3,
          "position": 2790
        },
        "endLoc": {
          "line": 335,
          "column": 50,
          "position": 2948
        }
      },
      "secondFile": {
        "name": "src/components/charts/vesting/VestingChartData.tsx",
        "start": 26,
        "end": 41,
        "startLoc": {
          "line": 26,
          "column": 3,
          "position": 232
        },
        "endLoc": {
          "line": 41,
          "column": 33,
          "position": 390
        }
      }
    },
    {
      "format": "tsx",
      "lines": 32,
      "fragment": "const extendedTimeline = useMemo(() => {\n    if (!deferredTimeline?.length) return [];\n    \n    const maxMonth = deferredTimeline[deferredTimeline.length - 1]?.month || 0;\n    const targetMonths = 120; // 10 years\n\n    if (maxMonth >= targetMonths) {\n      return deferredTimeline.slice(0, targetMonths + 1);\n    }\n    \n    const extended = [...deferredTimeline];\n    const lastPoint = deferredTimeline[deferredTimeline.length - 1];\n    if (!lastPoint) return extended;\n\n    for (let month = maxMonth + 1; month <= targetMonths; month++) {\n      const bitcoinPrice = deferredBitcoinPrice * (1 + monthlyGrowthRate) ** month;\n      const employerBalance = lastPoint.employerBalance || 0;\n\n      extended.push({\n        month,\n        employeeBalance: lastPoint.employeeBalance,\n        employerBalance,\n        vestedAmount: lastPoint.vestedAmount,\n        totalBalance: lastPoint.totalBalance,\n        bitcoinPrice,\n        usdValue: employerBalance * bitcoinPrice,\n      });\n    }\n    return extended;\n  }, [deferredTimeline, monthlyGrowthRate, deferredBitcoinPrice]);\n\n  // Pre-calculate grant rules to avoid repeated switch statements",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 361,
        "end": 392,
        "startLoc": {
          "line": 361,
          "column": 3,
          "position": 3183
        },
        "endLoc": {
          "line": 392,
          "column": 65,
          "position": 3498
        }
      },
      "secondFile": {
        "name": "src/components/charts/vesting/VestingChartData.tsx",
        "start": 47,
        "end": 78,
        "startLoc": {
          "line": 47,
          "column": 3,
          "position": 449
        },
        "endLoc": {
          "line": 78,
          "column": 31,
          "position": 764
        }
      }
    },
    {
      "format": "tsx",
      "lines": 53,
      "fragment": "const yearlyData = useMemo(() => {\n    if (!extendedTimeline?.length) return [];\n    \n    const yearlyPoints: Array<{\n      year: number;\n      btcBalance: number;\n      usdValue: number;\n      bitcoinPrice: number;\n      vestedAmount: number;\n      vestingPercent: number;\n      grantSize: number;\n      grantCost: number;\n      isInitialGrant: boolean;\n    }> = [];\n    \n    for (let year = 0; year <= 10; year++) {\n      const pointIndex = year * 12;\n      const point = extendedTimeline[pointIndex];\n      if (!point) continue;\n      \n      let grantSize = 0;\n      let grantCost = 0;\n      const isInitialGrant = year === 0;\n      \n      if (isInitialGrant && initialGrant > 0) {\n        grantSize = initialGrant;\n        grantCost = initialGrant * deferredBitcoinPrice;\n      } else if (annualGrant && year > 0 && year <= grantRules.maxYears && grantRules.hasAnnualGrants) {\n        grantSize = annualGrant;\n        grantCost = annualGrant * deferredBitcoinPrice;\n      }\n      \n      const btcBalance = Math.max(0, point.employerBalance || 0);\n      const bitcoinPrice = Math.max(deferredBitcoinPrice, point.bitcoinPrice || deferredBitcoinPrice);\n      const vestingPercent = getVestingPercentage(year * 12);\n      \n      yearlyPoints.push({\n        year,\n        btcBalance,\n        usdValue: btcBalance * bitcoinPrice,\n        bitcoinPrice,\n        vestedAmount: point.vestedAmount || 0,\n        vestingPercent,\n        grantSize,\n        grantCost,\n        isInitialGrant\n      });\n    }\n    \n    return yearlyPoints;\n  }, [extendedTimeline, initialGrant, annualGrant, deferredBitcoinPrice, getVestingPercentage, grantRules]);\n\n  // Calculate cost basis based on scheme - all at current price (what employer actually pays)",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 426,
        "end": 478,
        "startLoc": {
          "line": 426,
          "column": 3,
          "position": 3780
        },
        "endLoc": {
          "line": 478,
          "column": 93,
          "position": 4268
        }
      },
      "secondFile": {
        "name": "src/components/charts/vesting/VestingChartData.tsx",
        "start": 86,
        "end": 138,
        "startLoc": {
          "line": 86,
          "column": 3,
          "position": 846
        },
        "endLoc": {
          "line": 138,
          "column": 32,
          "position": 1334
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "const handleMouseMove = useCallback((e: any) => {\n    if (e && e.activeLabel !== undefined) {\n      // Use startTransition for non-urgent updates\n      startTransition(() => {\n        setHoveredYear(e.activeLabel);\n      });\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    startTransition(() => {\n      setHoveredYear(null);\n    });\n  }, []);\n\n  // Emergency performance guard - prevent rendering with huge datasets (after all hooks)",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/VestingTimelineChartRecharts.tsx",
        "start": 573,
        "end": 588,
        "startLoc": {
          "line": 573,
          "column": 3,
          "position": 5386
        },
        "endLoc": {
          "line": 588,
          "column": 88,
          "position": 5513
        }
      },
      "secondFile": {
        "name": "src/components/charts/vesting/VestingChartContainer.tsx",
        "start": 81,
        "end": 96,
        "startLoc": {
          "line": 81,
          "column": 3,
          "position": 636
        },
        "endLoc": {
          "line": 96,
          "column": 27,
          "position": 763
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "if (path !== pathname && !link.getAttribute('data-prefetched')) {\n              const prefetchLink = document.createElement('link');\n              prefetchLink.rel = 'prefetch';\n              prefetchLink.href = path;\n              prefetchLink.as = 'document';\n              \n              const existing = document.querySelector(`link[rel=\"prefetch\"][href=\"${path}\"]`);\n              if (!existing) {\n                document.head.appendChild(prefetchLink);\n                link.setAttribute('data-prefetched', 'true');\n              }\n            }\n          }\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/PrefetchLinks.tsx",
        "start": 77,
        "end": 91,
        "startLoc": {
          "line": 77,
          "column": 13,
          "position": 731
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 865
        }
      },
      "secondFile": {
        "name": "src/components/PrefetchLinks.tsx",
        "start": 50,
        "end": 63,
        "startLoc": {
          "line": 50,
          "column": 9,
          "position": 460
        },
        "endLoc": {
          "line": 63,
          "column": 2,
          "position": 592
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "HomeIcon,\n  CalculatorIcon,\n  ClockIcon,\n  BookOpenIcon,\n  LinkIcon,\n  MagnifyingGlassIcon,\n  SunIcon,\n  MoonIcon,\n} from '@heroicons/react/24/outline';\nimport {\n  HomeIcon as HomeIconSolid,\n  CalculatorIcon as CalculatorIconSolid,\n  ClockIcon as ClockIconSolid,\n  BookOpenIcon as BookOpenIconSolid,\n  LinkIcon as LinkIconSolid,\n  MagnifyingGlassIcon as MagnifyingGlassIconSolid,\n  SunIcon as SunIconSolid,\n  MoonIcon as MoonIconSolid,\n} from '@heroicons/react/24/solid';\nimport { cn",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/MobileNavSheet.tsx",
        "start": 23,
        "end": 42,
        "startLoc": {
          "line": 23,
          "column": 3,
          "position": 134
        },
        "endLoc": {
          "line": 42,
          "column": 3,
          "position": 251
        }
      },
      "secondFile": {
        "name": "src/components/Navigation.tsx",
        "start": 20,
        "end": 39,
        "startLoc": {
          "line": 20,
          "column": 3,
          "position": 120
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 237
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nfunction formatNumber",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 70,
        "end": 82,
        "startLoc": {
          "line": 70,
          "column": 3,
          "position": 513
        },
        "endLoc": {
          "line": 82,
          "column": 13,
          "position": 602
        }
      },
      "secondFile": {
        "name": "src/components/VirtualizedAnnualBreakdown.tsx",
        "start": 24,
        "end": 40,
        "startLoc": {
          "line": 24,
          "column": 3,
          "position": 159
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 268
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": ";\n}\n\n// Memoized formatting functions\nconst formatBTC = (amount: number): string => {\n  if (amount === 0) return '₿0';\n  if (amount >= 1) return `₿${amount.toFixed(2)}`;\n  return `₿${amount.toFixed(3)}`;\n};\n\nconst formatBTCCompact",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalTimelineVisualizationOptimized.tsx",
        "start": 12,
        "end": 22,
        "startLoc": {
          "line": 12,
          "column": 10,
          "position": 115
        },
        "endLoc": {
          "line": 22,
          "column": 17,
          "position": 204
        }
      },
      "secondFile": {
        "name": "src/components/VirtualizedAnnualBreakdownOptimized.tsx",
        "start": 24,
        "end": 34,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 173
        },
        "endLoc": {
          "line": 34,
          "column": 10,
          "position": 262
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ";\n};\n\nconst formatUSD = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\nconst formatUSDCompact",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalTimelineVisualizationOptimized.tsx",
        "start": 25,
        "end": 37,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 268
        },
        "endLoc": {
          "line": 37,
          "column": 17,
          "position": 352
        }
      },
      "secondFile": {
        "name": "src/components/VirtualizedAnnualBreakdownOptimized.tsx",
        "start": 31,
        "end": 43,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 254
        },
        "endLoc": {
          "line": 43,
          "column": 14,
          "position": 338
        }
      }
    },
    {
      "format": "javascript",
      "lines": 184,
      "fragment": "}>\n        {label}\n      </div>\n      {sublabel && (\n        <div className={`text-xs ${textColorClasses[color]} opacity-60 mt-1`}>\n          {sublabel}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction formatBTC(amount: number): string {\n  return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nfunction formatPercent(value: number): string {\n  return `${(value * 100).toFixed(1)}%`;\n}\n\nfunction formatNumber(num: number): string {\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(1)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(1)}K`;\n  }\n  return num.toFixed(0);\n}\n\nexport default function HistoricalMetricCards({ historicalResults, currentBitcoinPrice, startingYear }: HistoricalMetricCardsProps) {\n  if (!historicalResults) return null;\n\n  const currentYear = new Date().getFullYear();\n  const yearsAnalyzed = currentYear - startingYear;\n  const roi = ((historicalResults.currentTotalValue - historicalResults.totalCostBasis) / historicalResults.totalCostBasis) * 100;\n  const totalGainUSD = historicalResults.currentTotalValue - historicalResults.totalCostBasis;\n  const gainMultiple = historicalResults.currentTotalValue / historicalResults.totalCostBasis;\n\n  const metricGroups = [\n    // Group 1: Core Values (matches the first set of cards from the image)\n    [\n      {\n        value: formatNumber(historicalResults.currentTotalValue),\n        label: 'Current Value',\n        color: 'orange' as const,\n        sublabel: `${formatBTC(historicalResults.totalBitcoinGranted)} total Bitcoin`,\n        icon: <SatoshiIcon className=\"w-6 h-6 text-bitcoin\" />\n      },\n      {\n        value: formatNumber(historicalResults.totalCostBasis),\n        label: 'What You Paid',\n        color: 'blue' as const,\n        sublabel: `Based on ${historicalResults.summary?.costBasisMethod || 'average'} yearly prices`,\n        icon: undefined as any\n      },\n      {\n        value: formatNumber(Math.max(0, totalGainUSD)),\n        label: 'Your Profit',\n        color: 'green' as const,\n        sublabel: `${roi.toFixed(0)}% gain in ${yearsAnalyzed} years`,\n        icon: undefined as any\n      },\n    ],\n    // Group 2: Performance & Analysis\n    [\n      {\n        value: formatPercent(historicalResults.annualizedReturn),\n        label: 'Yearly Growth',\n        color: 'purple' as const,\n        sublabel: 'Average per year',\n        icon: undefined as any\n      },\n      {\n        value: `${gainMultiple.toFixed(1)}x`,\n        label: 'Growth Multiple',\n        color: 'blue' as const,\n        sublabel: 'Value vs cost',\n        icon: undefined as any\n      },\n      {\n        value: `${roi.toFixed(0)}%`,\n        label: 'Return on Investment',\n        color: 'green' as const,\n        sublabel: 'Total gain',\n        icon: undefined as any\n      },\n    ],\n    // Group 3: Historical Details (matches the second set of cards from the image)\n    [\n      {\n        value: formatBTC(historicalResults.totalBitcoinGranted),\n        label: 'Total Bitcoin Given',\n        color: 'orange' as const,\n        sublabel: 'All awards combined',\n        icon: <SatoshiIcon className=\"w-6 h-6 text-bitcoin\" />\n      },\n      {\n        value: formatUSD(historicalResults.totalCostBasis),\n        label: 'Total Cost',\n        color: 'green' as const,\n        sublabel: 'What you actually paid',\n        icon: undefined as any\n      },\n      {\n        value: formatUSD(historicalResults.currentTotalValue),\n        label: \"Today's Value\",\n        color: 'blue' as const,\n        sublabel: 'Worth right now',\n        icon: undefined as any\n      },\n    ],\n    // Group 4: Historical Context\n    [\n      {\n        value: `${startingYear}`,\n        label: 'Starting Year',\n        color: 'blue' as const,\n        sublabel: `${yearsAnalyzed} years analyzed`,\n        icon: undefined as any\n      },\n      {\n        value: formatUSD(totalGainUSD),\n        label: 'Total Return',\n        color: 'green' as const,\n        sublabel: 'Dollar gain',\n        icon: undefined as any\n      },\n      {\n        value: formatBTC(historicalResults.totalBitcoinGranted / yearsAnalyzed),\n        label: 'Average Yearly Award',\n        color: 'orange' as const,\n        sublabel: 'Bitcoin per year',\n        icon: <SatoshiIcon className=\"w-6 h-6 text-bitcoin\" />\n      },\n    ],\n  ];\n\n  return (\n    <div className=\"w-full mb-6\">\n      <div className=\"relative px-12\">\n        <Carousel\n          opts={{\n            align: \"start\",\n            loop: true,\n          }}\n          className=\"w-full\"\n        >\n          <CarouselContent className=\"-ml-2 md:-ml-4\">\n            {metricGroups.map((group, groupIndex) => (\n              <CarouselItem key={groupIndex} className=\"pl-2 md:pl-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                  {group.map((metric, index) => (\n                    <MetricCard\n                      key={index}\n                      value={metric.value}\n                      label={metric.label}\n                      color={metric.color}\n                      sublabel={metric.sublabel}\n                      icon={metric.icon}\n                    />\n                  ))}\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          <CarouselPrevious className=\"hidden sm:flex\" />\n          <CarouselNext className=\"hidden sm:flex\" />\n        </Carousel>\n        \n        {/* Carousel indicators */}\n        <div className=\"flex justify-center mt-4 space-x-2\">\n          {metricGroups.map((_, index) => (\n            <div\n              key={index}",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 51,
        "end": 234,
        "startLoc": {
          "line": 51,
          "column": 13,
          "position": 354
        },
        "endLoc": {
          "line": 234,
          "column": 2,
          "position": 1851
        }
      },
      "secondFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 57,
        "end": 426,
        "startLoc": {
          "line": 57,
          "column": 12,
          "position": 415
        },
        "endLoc": {
          "line": 426,
          "column": 2,
          "position": 3929
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\n\ninterface MetricCardProps {\n  value: string | number;\n  label: string;\n  color: 'orange' | 'green' | 'blue' | 'purple';\n  sublabel?: string;\n  icon?: React.ReactNode;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 3,
        "end": 18,
        "startLoc": {
          "line": 3,
          "column": 21,
          "position": 15
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 110
        }
      },
      "secondFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 5,
        "end": 20,
        "startLoc": {
          "line": 5,
          "column": 21,
          "position": 37
        },
        "endLoc": {
          "line": 20,
          "column": 12,
          "position": 133
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": "}: MetricCardProps) {\n  const colorClasses = {\n    orange: 'bg-orange-50 border-orange-200 dark:bg-orange-950/20 dark:border-orange-800',\n    green: 'bg-green-50 border-green-200 dark:bg-green-950/20 dark:border-green-800',\n    blue: 'bg-blue-50 border-blue-200 dark:bg-blue-950/20 dark:border-blue-800',\n    purple: 'bg-purple-50 border-purple-200 dark:bg-purple-950/20 dark:border-purple-800',\n  };\n\n  const textColorClasses = {\n    orange: 'text-orange-900 dark:text-orange-100',\n    green: 'text-green-900 dark:text-green-100',\n    blue: 'text-blue-900 dark:text-blue-100',\n    purple: 'text-purple-900 dark:text-purple-100',\n  };\n\n  return (\n    <div className={`relative h-32 rounded-sm border-2 ${colorClasses[color]} p-4 flex flex-col justify-center items-center text-center transition-all duration-200 hover:shadow-md`}>\n      {icon && (\n        <div className=\"absolute top-3 right-3 opacity-30\">\n          {icon}\n        </div>\n      )}\n      <div className={`text-2xl font-bold ${textColorClasses[color]} mb-1`}>\n        {value}\n      </div>\n      <div className={`text-sm font-medium ${textColorClasses[color]} opacity-80`}>\n        {label}\n      </",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 26,
        "end": 53,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 163
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 363
        }
      },
      "secondFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 30,
        "end": 57,
        "startLoc": {
          "line": 30,
          "column": 2,
          "position": 203
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 403
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ";\n}\n\nfunction formatBTC(amount: number): string {\n  return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nfunction formatPercent",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 60,
        "end": 76,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 414
        },
        "endLoc": {
          "line": 76,
          "column": 14,
          "position": 524
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 37,
        "end": 40,
        "startLoc": {
          "line": 37,
          "column": 7,
          "position": 353
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 268
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(1)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(1)}K`;\n  }\n  return num.toFixed(0);\n}\n\nexport default function HistoricalMetricCards",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 81,
        "end": 90,
        "startLoc": {
          "line": 81,
          "column": 3,
          "position": 576
        },
        "endLoc": {
          "line": 90,
          "column": 22,
          "position": 667
        }
      },
      "secondFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 84,
        "end": 93,
        "startLoc": {
          "line": 84,
          "column": 3,
          "position": 636
        },
        "endLoc": {
          "line": 93,
          "column": 12,
          "position": 727
        }
      }
    },
    {
      "format": "tsx",
      "lines": 44,
      "fragment": "\">\n      <div className=\"relative px-12\">\n        <Carousel\n          opts={{\n            align: \"start\",\n            loop: true,\n          }}\n          className=\"w-full\"\n        >\n          <CarouselContent className=\"-ml-2 md:-ml-4\">\n            {metricGroups.map((group, groupIndex) => (\n              <CarouselItem key={groupIndex} className=\"pl-2 md:pl-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                  {group.map((metric, index) => (\n                    <MetricCard\n                      key={index}\n                      value={metric.value}\n                      label={metric.label}\n                      color={metric.color}\n                      sublabel={metric.sublabel}\n                      icon={metric.icon}\n                    />\n                  ))}\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          <CarouselPrevious className=\"hidden sm:flex\" />\n          <CarouselNext className=\"hidden sm:flex\" />\n        </Carousel>\n        \n        {/* Carousel indicators */}\n        <div className=\"flex justify-center mt-4 space-x-2\">\n          {metricGroups.map((_, index) => (\n            <div\n              key={index}\n              className=\"w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-600\"\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalMetricCards.tsx",
        "start": 199,
        "end": 242,
        "startLoc": {
          "line": 199,
          "column": 12,
          "position": 1585
        },
        "endLoc": {
          "line": 242,
          "column": 2,
          "position": 1885
        }
      },
      "secondFile": {
        "name": "src/components/MetricCards.tsx",
        "start": 391,
        "end": 434,
        "startLoc": {
          "line": 391,
          "column": 21,
          "position": 3663
        },
        "endLoc": {
          "line": 434,
          "column": 2,
          "position": 3963
        }
      }
    },
    {
      "format": "javascript",
      "lines": 112,
      "fragment": "}\n          className=\"px-0 hover:bg-transparent font-medium text-gray-500 dark:text-white/80 uppercase text-xs\"\n        >\n          BTC\n          {column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => (\n        <span className=\"text-sm text-gray-700 dark:text-white/90\">\n          {formatBTC(getValue())}\n        </span>\n      ),\n    }),\n\n    columnHelper.accessor('historicalPrice', {\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"px-0 hover:bg-transparent font-medium text-gray-500 dark:text-white/80 uppercase text-xs hidden md:flex\"\n        >\n          BTC Price\n          {column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => {\n        const price = getValue();\n        return (\n          <span className=\"text-sm text-gray-700 dark:text-white/90 hidden md:table-cell\">\n            {price > 0 ? formatUSD(price) : '—'}\n          </span>\n        );\n      },\n    }),\n\n    columnHelper.accessor('historicalValue', {\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"px-0 hover:bg-transparent font-medium text-gray-500 dark:text-white/80 uppercase text-xs hidden lg:flex\"\n        >\n          Historical USD\n          {column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => {\n        const value = getValue();\n        return (\n          <span className=\"text-sm text-gray-700 dark:text-white/90 hidden lg:table-cell\">\n            {value > 0 ? formatUSD(value) : '—'}\n          </span>\n        );\n      },\n    }),\n\n    columnHelper.accessor('currentValue', {\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"px-0 hover:bg-transparent font-medium text-gray-500 dark:text-white/80 uppercase text-xs\"\n        >\n          Current USD\n          {column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => (\n        <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">\n          {formatUSD(getValue())}\n        </span>\n      ),\n    }),\n\n    columnHelper.accessor('vestingPercent', {\n      header: () => (\n        <span className=\"font-medium text-gray-500 dark:text-white/80 uppercase text-xs\">\n          Unlocked\n        </span>\n      ),\n      cell: ({ getValue }) => {\n        const percent = getValue();\n        const variant = percent === 100 ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200' :\n                       percent === 50 ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200' :\n                       'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200';\n        \n        return (\n          <Badge className={`",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 123,
        "end": 234,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 973
        },
        "endLoc": {
          "line": 234,
          "column": 2,
          "position": 1958
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 112,
        "end": 201,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 874
        },
        "endLoc": {
          "line": 201,
          "column": 2,
          "position": 1660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n}\n\nfunction formatBTC(amount: number): string {\n  return `₿${amount.toFixed(3)}`;\n}\n\nfunction formatUSD(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n}\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 41,
        "end": 55,
        "startLoc": {
          "line": 41,
          "column": 7,
          "position": 252
        },
        "endLoc": {
          "line": 55,
          "column": 6,
          "position": 346
        }
      },
      "secondFile": {
        "name": "src/app/calculator/[plan]/CalculatorPlanClient.tsx",
        "start": 37,
        "end": 51,
        "startLoc": {
          "line": 37,
          "column": 7,
          "position": 353
        },
        "endLoc": {
          "line": 51,
          "column": 9,
          "position": 447
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "{column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => {",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 100,
        "end": 109,
        "startLoc": {
          "line": 100,
          "column": 11,
          "position": 728
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 832
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 76,
        "end": 85,
        "startLoc": {
          "line": 76,
          "column": 11,
          "position": 515
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 619
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "{column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => (\n        <span className=\"text-sm text-gray-700 dark:text-white/90",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 127,
        "end": 137,
        "startLoc": {
          "line": 127,
          "column": 11,
          "position": 987
        },
        "endLoc": {
          "line": 137,
          "column": 41,
          "position": 1100
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 76,
        "end": 86,
        "startLoc": {
          "line": 76,
          "column": 11,
          "position": 515
        },
        "endLoc": {
          "line": 86,
          "column": 42,
          "position": 628
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "{column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => {\n        const price",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 151,
        "end": 161,
        "startLoc": {
          "line": 151,
          "column": 11,
          "position": 1202
        },
        "endLoc": {
          "line": 161,
          "column": 6,
          "position": 1311
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 76,
        "end": 110,
        "startLoc": {
          "line": 76,
          "column": 11,
          "position": 515
        },
        "endLoc": {
          "line": 110,
          "column": 5,
          "position": 837
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "{column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => {\n        const value",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 178,
        "end": 188,
        "startLoc": {
          "line": 178,
          "column": 11,
          "position": 1448
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1557
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 76,
        "end": 110,
        "startLoc": {
          "line": 76,
          "column": 11,
          "position": 515
        },
        "endLoc": {
          "line": 110,
          "column": 5,
          "position": 837
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "USD\n          {column.getIsSorted() === \"asc\" ? (\n            <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n          ) : column.getIsSorted() === \"desc\" ? (\n            <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n          ) : (\n            <ArrowsUpDownIcon className=\"ml-2 h-4 w-4\" />\n          )}\n        </Button>\n      ),\n      cell: ({ getValue }) => (\n        <span className=\"text-sm font-semibold text-green-600 dark:text-green-400",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 204,
        "end": 215,
        "startLoc": {
          "line": 204,
          "column": 2,
          "position": 1691
        },
        "endLoc": {
          "line": 215,
          "column": 57,
          "position": 1807
        }
      },
      "secondFile": {
        "name": "src/components/HistoricalDataTable.tsx",
        "start": 177,
        "end": 86,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1445
        },
        "endLoc": {
          "line": 86,
          "column": 42,
          "position": 628
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "\"\n              >\n                <svg\n                  className=\"w-4 h-4 mr-2\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15",
      "tokens": 0,
      "firstFile": {
        "name": "src/components/ErrorBoundary.tsx",
        "start": 99,
        "end": 111,
        "startLoc": {
          "line": 99,
          "column": 159,
          "position": 704
        },
        "endLoc": {
          "line": 111,
          "column": 108,
          "position": 763
        }
      },
      "secondFile": {
        "name": "src/components/ErrorBoundary.tsx",
        "start": 80,
        "end": 92,
        "startLoc": {
          "line": 80,
          "column": 161,
          "position": 601
        },
        "endLoc": {
          "line": 92,
          "column": 46,
          "position": 660
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/page.tsx",
        "start": 303,
        "end": 310,
        "startLoc": {
          "line": 303,
          "column": 83,
          "position": 3012
        },
        "endLoc": {
          "line": 310,
          "column": 5,
          "position": 3090
        }
      },
      "secondFile": {
        "name": "src/app/learn/page.tsx",
        "start": 106,
        "end": 356,
        "startLoc": {
          "line": 106,
          "column": 83,
          "position": 1124
        },
        "endLoc": {
          "line": 356,
          "column": 2,
          "position": 3497
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\" className=\"group block\">\n              <div className=\"bg-slate-700/30 border border-slate-600/50 rounded-sm p-8 h-full hover:bg-slate-700/50 hover:border-bitcoin/30 transition-all duration-300 relative overflow-hidden\">\n                {/* Hover glow effect */}\n                <div className=\"absolute inset-0 bg-bitcoin/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                \n                <div className=\"relative z-10 flex flex-col h-full\">\n                  {/* Icon and title */}\n                  <div className=\"flex items-start gap-4 mb-6\">\n                    <div className=\"w-12 h-12 rounded-sm bg-bitcoin/20 flex items-center justify-center flex-shrink-0 group-hover:bg-bitcoin transition-colors duration-300\">\n                      <SatoshiIcon",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/page.tsx",
        "start": 313,
        "end": 322,
        "startLoc": {
          "line": 313,
          "column": 34,
          "position": 3107
        },
        "endLoc": {
          "line": 322,
          "column": 12,
          "position": 3188
        }
      },
      "secondFile": {
        "name": "src/app/page.tsx",
        "start": 271,
        "end": 280,
        "startLoc": {
          "line": 271,
          "column": 31,
          "position": 2685
        },
        "endLoc": {
          "line": 280,
          "column": 12,
          "position": 2766
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "Plan</span>\n                      <svg className=\"w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            {/* Builder */",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/page.tsx",
        "start": 344,
        "end": 354,
        "startLoc": {
          "line": 344,
          "column": 2,
          "position": 3418
        },
        "endLoc": {
          "line": 354,
          "column": 14,
          "position": 3515
        }
      },
      "secondFile": {
        "name": "src/app/page.tsx",
        "start": 302,
        "end": 312,
        "startLoc": {
          "line": 302,
          "column": 2,
          "position": 2999
        },
        "endLoc": {
          "line": 312,
          "column": 14,
          "position": 3096
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\" className=\"group block\">\n              <div className=\"bg-slate-700/30 border border-slate-600/50 rounded-sm p-8 h-full hover:bg-slate-700/50 hover:border-bitcoin/30 transition-all duration-300 relative overflow-hidden\">\n                {/* Hover glow effect */}\n                <div className=\"absolute inset-0 bg-bitcoin/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                \n                <div className=\"relative z-10 flex flex-col h-full\">\n                  {/* Icon and title */}\n                  <div className=\"flex items-start gap-4 mb-6\">\n                    <div className=\"w-12 h-12 rounded-sm bg-bitcoin/20 flex items-center justify-center flex-shrink-0 group-hover:bg-bitcoin transition-colors duration-300\">\n                      <MiningOutlineIcon",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/page.tsx",
        "start": 355,
        "end": 364,
        "startLoc": {
          "line": 355,
          "column": 29,
          "position": 3526
        },
        "endLoc": {
          "line": 364,
          "column": 18,
          "position": 3607
        }
      },
      "secondFile": {
        "name": "src/app/page.tsx",
        "start": 271,
        "end": 280,
        "startLoc": {
          "line": 271,
          "column": 31,
          "position": 2685
        },
        "endLoc": {
          "line": 280,
          "column": 12,
          "position": 2766
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "Plan</span>\n                      <svg className=\"w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </",
      "tokens": 0,
      "firstFile": {
        "name": "src/app/page.tsx",
        "start": 386,
        "end": 395,
        "startLoc": {
          "line": 386,
          "column": 2,
          "position": 3849
        },
        "endLoc": {
          "line": 395,
          "column": 3,
          "position": 3944
        }
      },
      "secondFile": {
        "name": "src/app/page.tsx",
        "start": 302,
        "end": 312,
        "startLoc": {
          "line": 302,
          "column": 2,
          "position": 2999
        },
        "endLoc": {
          "line": 312,
          "column": 2,
          "position": 3095
        }
      }
    }
  ]
}